[immutable slots]
expected(0) = 0xBFC80000 (-1.5625)
expected(1) = 0
expected(2) = 0x3F400000 (0.75)
expected(3) = 0x40580000 (3.375)
exponents(0) = 0x40000000 (2.0)
exponents(1) = 0x40400000 (3.0)
exponents(2) = 0x3F800000 (1.0)
exponents(3) = 0x3FC00000 (1.5)
half2(1.5625, 0.0)(0) = 0x3FC80000 (1.5625)
half2(1.5625, 0.0)(1) = 0
half3(1.5625, 0.0, 0.75)(0) = 0x3FC80000 (1.5625)
half3(1.5625, 0.0, 0.75)(1) = 0
half3(1.5625, 0.0, 0.75)(2) = 0x3F400000 (0.75)
half4(1.5625, 0.0, 0.75, 3.375)(0) = 0x3FC80000 (1.5625)
half4(1.5625, 0.0, 0.75, 3.375)(1) = 0
half4(1.5625, 0.0, 0.75, 3.375)(2) = 0x3F400000 (0.75)
half4(1.5625, 0.0, 0.75, 3.375)(3) = 0x40580000 (3.375)

store_src_rg                   coords = src.rg
init_lane_masks                CondMask = LoopMask = RetMask = true
copy_uniform                   $0 = testInputs(0)
copy_constant                  $1 = 0x40000000 (2.0)
pow_n_floats                   $0 = pow($0, $1)
copy_slot_unmasked             $1 = expected(0)
cmpeq_float                    $0 = equal($0, $1)
copy_2_uniforms                $1..2 = testInputs(0..1)
copy_2_slots_unmasked          $3..4 = exponents(0..1)
pow_n_floats                   $1..2 = pow($1..2, $3..4)
copy_2_slots_unmasked          $3..4 = expected(0..1)
cmpeq_2_floats                 $1..2 = equal($1..2, $3..4)
bitwise_and_int                $1 &= $2
bitwise_and_int                $0 &= $1
copy_3_uniforms                $1..3 = testInputs(0..2)
copy_3_slots_unmasked          $4..6 = exponents(0..2)
pow_n_floats                   $1..3 = pow($1..3, $4..6)
copy_3_slots_unmasked          $4..6 = expected(0..2)
cmpeq_3_floats                 $1..3 = equal($1..3, $4..6)
bitwise_and_int                $2 &= $3
bitwise_and_int                $1 &= $2
bitwise_and_int                $0 &= $1
copy_4_uniforms                $1..4 = testInputs
copy_4_slots_unmasked          $5..8 = exponents
pow_n_floats                   $1..4 = pow($1..4, $5..8)
copy_4_slots_unmasked          $5..8 = expected
cmpeq_4_floats                 $1..4 = equal($1..4, $5..8)
bitwise_and_2_ints             $1..2 &= $3..4
bitwise_and_int                $1 &= $2
bitwise_and_int                $0 &= $1
copy_slot_unmasked             $1 = expected(0)
cmpeq_imm_float                $1 = equal($1, 0x3FC80000 (1.5625))
bitwise_and_int                $0 &= $1
copy_2_slots_unmasked          $1..2 = half2(1.5625, 0.0)
copy_2_slots_unmasked          $3..4 = expected(0..1)
cmpeq_2_floats                 $1..2 = equal($1..2, $3..4)
bitwise_and_int                $1 &= $2
bitwise_and_int                $0 &= $1
copy_3_slots_unmasked          $1..3 = half3(1.5625, 0.0, 0.75)
copy_3_slots_unmasked          $4..6 = expected(0..2)
cmpeq_3_floats                 $1..3 = equal($1..3, $4..6)
bitwise_and_int                $2 &= $3
bitwise_and_int                $1 &= $2
bitwise_and_int                $0 &= $1
copy_4_slots_unmasked          $1..4 = half4(1.5625, 0.0, 0.75, 3.375)
copy_4_slots_unmasked          $5..8 = expected
cmpeq_4_floats                 $1..4 = equal($1..4, $5..8)
bitwise_and_2_ints             $1..2 &= $3..4
bitwise_and_int                $1 &= $2
bitwise_and_int                $0 &= $1
swizzle_4                      $0..3 = ($0..3).xxxx
copy_4_uniforms                $4..7 = colorRed
copy_4_uniforms                $8..11 = colorGreen
mix_4_ints                     $0..3 = mix($4..7, $8..11, $0..3)
load_src                       src.rgba = $0..3
