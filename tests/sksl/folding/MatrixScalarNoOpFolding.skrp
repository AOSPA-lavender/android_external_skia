    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. store_condition_mask           $165 = CondMask
    4. store_condition_mask           $149 = CondMask
    5. store_condition_mask           $97 = CondMask
    6. store_condition_mask           $66 = CondMask
    7. store_condition_mask           $51 = CondMask
    8. branch_if_no_lanes_active      branch_if_no_lanes_active +74 (label 6 at #82)
    9. store_return_mask              $52 = RetMask
   10. zero_4_slots_unmasked          m = 0
   11. zero_4_slots_unmasked          mm = 0
   12. zero_2_slots_unmasked          $53..54 = 0
   13. swizzle_4                      $53..56 = ($53..56).yxxy
   14. copy_4_slots_unmasked          z = $53..56
   15. copy_4_constants               $53..56 = testMatrix2x2
   16. copy_4_slots_masked            m = Mask($53..56)
   17. copy_4_constants               $53..56 = testMatrix2x2
   18. copy_4_slots_masked            m = Mask($53..56)
   19. store_condition_mask           $53 = CondMask
   20. copy_4_slots_unmasked          $54..57 = m
   21. copy_4_constants               $58..61 = testMatrix2x2
   22. cmpne_4_floats                 $54..57 = notEqual($54..57, $58..61)
   23. bitwise_or_2_ints              $54..55 |= $56..57
   24. bitwise_or_int                 $54 |= $55
   25. merge_condition_mask           CondMask = $53 & $54
   26. zero_slot_unmasked             $55 = 0
   27. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($55)
   28. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   29. load_condition_mask            CondMask = $53
   30. store_condition_mask           $53 = CondMask
   31. copy_4_slots_unmasked          $54..57 = m
   32. copy_4_constants               $58..61 = testMatrix2x2
   33. cmpne_4_floats                 $54..57 = notEqual($54..57, $58..61)
   34. bitwise_or_2_ints              $54..55 |= $56..57
   35. bitwise_or_int                 $54 |= $55
   36. merge_condition_mask           CondMask = $53 & $54
   37. zero_slot_unmasked             $55 = 0
   38. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($55)
   39. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   40. load_condition_mask            CondMask = $53
   41. store_condition_mask           $53 = CondMask
   42. copy_4_slots_unmasked          $54..57 = m
   43. copy_4_constants               $58..61 = testMatrix2x2
   44. cmpne_4_floats                 $54..57 = notEqual($54..57, $58..61)
   45. bitwise_or_2_ints              $54..55 |= $56..57
   46. bitwise_or_int                 $54 |= $55
   47. merge_condition_mask           CondMask = $53 & $54
   48. zero_slot_unmasked             $55 = 0
   49. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($55)
   50. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   51. load_condition_mask            CondMask = $53
   52. zero_4_slots_unmasked          $53..56 = 0
   53. copy_4_slots_unmasked          $57..60 = m
   54. sub_4_floats                   $53..56 -= $57..60
   55. copy_4_slots_masked            m = Mask($53..56)
   56. store_condition_mask           $53 = CondMask
   57. copy_4_slots_unmasked          $54..57 = m
   58. zero_4_slots_unmasked          $58..61 = 0
   59. copy_4_constants               $62..65 = testMatrix2x2
   60. sub_4_floats                   $58..61 -= $62..65
   61. cmpne_4_floats                 $54..57 = notEqual($54..57, $58..61)
   62. bitwise_or_2_ints              $54..55 |= $56..57
   63. bitwise_or_int                 $54 |= $55
   64. merge_condition_mask           CondMask = $53 & $54
   65. zero_slot_unmasked             $55 = 0
   66. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($55)
   67. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   68. load_condition_mask            CondMask = $53
   69. zero_2_slots_unmasked          $53..54 = 0
   70. swizzle_4                      $53..56 = ($53..56).yxxy
   71. copy_4_slots_masked            mm = Mask($53..56)
   72. zero_2_slots_unmasked          $53..54 = 0
   73. swizzle_4                      $53..56 = ($53..56).yxxy
   74. copy_4_slots_masked            mm = Mask($53..56)
   75. copy_4_slots_unmasked          $57..60 = z
   76. cmpeq_4_floats                 $53..56 = equal($53..56, $57..60)
   77. bitwise_and_2_ints             $53..54 &= $55..56
   78. bitwise_and_int                $53 &= $54
   79. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($53)
   80. load_return_mask               RetMask = $52
   81. copy_slot_unmasked             $52 = [test_no_op_scalar_X_mat2].result
   82. label                          label 0x00000006
   83. zero_slot_unmasked             $67 = 0
   84. merge_condition_mask           CondMask = $51 & $52
   85. branch_if_no_lanes_active      branch_if_no_lanes_active +129 (label 5 at #214)
   86. store_return_mask              $68 = RetMask
   87. zero_4_slots_unmasked          m₁(0..3) = 0
   88. zero_4_slots_unmasked          m₁(4..7) = 0
   89. zero_4_slots_unmasked          m₁(8), mm₁(0..2) = 0
   90. zero_4_slots_unmasked          mm₁(3..6) = 0
   91. zero_2_slots_unmasked          mm₁(7..8) = 0
   92. zero_2_slots_unmasked          $69..70 = 0
   93. shuffle                        $69..77 = ($69..77)[1 0 0 0 1 0 0 0 1]
   94. copy_4_slots_unmasked          z₁(0..3) = $69..72
   95. copy_4_slots_unmasked          z₁(4..7) = $73..76
   96. copy_slot_unmasked             z₁(8) = $77
   97. copy_4_constants               $69..72 = testMatrix3x3(0..3)
   98. copy_4_constants               $73..76 = testMatrix3x3(4..7)
   99. copy_constant                  $77 = testMatrix3x3(8)
  100. copy_4_slots_masked            m₁(0..3) = Mask($69..72)
  101. copy_4_slots_masked            m₁(4..7) = Mask($73..76)
  102. copy_slot_masked               m₁(8) = Mask($77)
  103. copy_4_constants               $69..72 = testMatrix3x3(0..3)
  104. copy_4_constants               $73..76 = testMatrix3x3(4..7)
  105. copy_constant                  $77 = testMatrix3x3(8)
  106. copy_4_slots_masked            m₁(0..3) = Mask($69..72)
  107. copy_4_slots_masked            m₁(4..7) = Mask($73..76)
  108. copy_slot_masked               m₁(8) = Mask($77)
  109. store_condition_mask           $69 = CondMask
  110. copy_4_slots_unmasked          $70..73 = m₁(0..3)
  111. copy_4_slots_unmasked          $74..77 = m₁(4..7)
  112. copy_slot_unmasked             $78 = m₁(8)
  113. copy_4_constants               $79..82 = testMatrix3x3(0..3)
  114. copy_4_constants               $83..86 = testMatrix3x3(4..7)
  115. copy_constant                  $87 = testMatrix3x3(8)
  116. cmpne_n_floats                 $70..78 = notEqual($70..78, $79..87)
  117. bitwise_or_4_ints              $71..74 |= $75..78
  118. bitwise_or_2_ints              $71..72 |= $73..74
  119. bitwise_or_int                 $71 |= $72
  120. bitwise_or_int                 $70 |= $71
  121. merge_condition_mask           CondMask = $69 & $70
  122. zero_slot_unmasked             $71 = 0
  123. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($71)
  124. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  125. load_condition_mask            CondMask = $69
  126. store_condition_mask           $69 = CondMask
  127. copy_4_slots_unmasked          $70..73 = m₁(0..3)
  128. copy_4_slots_unmasked          $74..77 = m₁(4..7)
  129. copy_slot_unmasked             $78 = m₁(8)
  130. copy_4_constants               $79..82 = testMatrix3x3(0..3)
  131. copy_4_constants               $83..86 = testMatrix3x3(4..7)
  132. copy_constant                  $87 = testMatrix3x3(8)
  133. cmpne_n_floats                 $70..78 = notEqual($70..78, $79..87)
  134. bitwise_or_4_ints              $71..74 |= $75..78
  135. bitwise_or_2_ints              $71..72 |= $73..74
  136. bitwise_or_int                 $71 |= $72
  137. bitwise_or_int                 $70 |= $71
  138. merge_condition_mask           CondMask = $69 & $70
  139. zero_slot_unmasked             $71 = 0
  140. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($71)
  141. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  142. load_condition_mask            CondMask = $69
  143. store_condition_mask           $69 = CondMask
  144. copy_4_slots_unmasked          $70..73 = m₁(0..3)
  145. copy_4_slots_unmasked          $74..77 = m₁(4..7)
  146. copy_slot_unmasked             $78 = m₁(8)
  147. copy_4_constants               $79..82 = testMatrix3x3(0..3)
  148. copy_4_constants               $83..86 = testMatrix3x3(4..7)
  149. copy_constant                  $87 = testMatrix3x3(8)
  150. cmpne_n_floats                 $70..78 = notEqual($70..78, $79..87)
  151. bitwise_or_4_ints              $71..74 |= $75..78
  152. bitwise_or_2_ints              $71..72 |= $73..74
  153. bitwise_or_int                 $71 |= $72
  154. bitwise_or_int                 $70 |= $71
  155. merge_condition_mask           CondMask = $69 & $70
  156. zero_slot_unmasked             $71 = 0
  157. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($71)
  158. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  159. load_condition_mask            CondMask = $69
  160. zero_4_slots_unmasked          $69..72 = 0
  161. zero_4_slots_unmasked          $73..76 = 0
  162. zero_slot_unmasked             $77 = 0
  163. copy_4_slots_unmasked          $78..81 = m₁(0..3)
  164. copy_4_slots_unmasked          $82..85 = m₁(4..7)
  165. copy_slot_unmasked             $86 = m₁(8)
  166. sub_n_floats                   $69..77 -= $78..86
  167. copy_4_slots_masked            m₁(0..3) = Mask($69..72)
  168. copy_4_slots_masked            m₁(4..7) = Mask($73..76)
  169. copy_slot_masked               m₁(8) = Mask($77)
  170. store_condition_mask           $69 = CondMask
  171. copy_4_slots_unmasked          $70..73 = m₁(0..3)
  172. copy_4_slots_unmasked          $74..77 = m₁(4..7)
  173. copy_slot_unmasked             $78 = m₁(8)
  174. zero_4_slots_unmasked          $79..82 = 0
  175. zero_4_slots_unmasked          $83..86 = 0
  176. zero_slot_unmasked             $87 = 0
  177. copy_4_constants               $88..91 = testMatrix3x3(0..3)
  178. copy_4_constants               $92..95 = testMatrix3x3(4..7)
  179. copy_constant                  $96 = testMatrix3x3(8)
  180. sub_n_floats                   $79..87 -= $88..96
  181. cmpne_n_floats                 $70..78 = notEqual($70..78, $79..87)
  182. bitwise_or_4_ints              $71..74 |= $75..78
  183. bitwise_or_2_ints              $71..72 |= $73..74
  184. bitwise_or_int                 $71 |= $72
  185. bitwise_or_int                 $70 |= $71
  186. merge_condition_mask           CondMask = $69 & $70
  187. zero_slot_unmasked             $71 = 0
  188. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($71)
  189. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  190. load_condition_mask            CondMask = $69
  191. zero_2_slots_unmasked          $69..70 = 0
  192. shuffle                        $69..77 = ($69..77)[1 0 0 0 1 0 0 0 1]
  193. copy_4_slots_masked            mm₁(0..3) = Mask($69..72)
  194. copy_4_slots_masked            mm₁(4..7) = Mask($73..76)
  195. copy_slot_masked               mm₁(8) = Mask($77)
  196. zero_2_slots_unmasked          $69..70 = 0
  197. shuffle                        $69..77 = ($69..77)[1 0 0 0 1 0 0 0 1]
  198. copy_4_slots_masked            mm₁(0..3) = Mask($69..72)
  199. copy_4_slots_masked            mm₁(4..7) = Mask($73..76)
  200. copy_slot_masked               mm₁(8) = Mask($77)
  201. copy_4_slots_unmasked          $78..81 = z₁(0..3)
  202. copy_4_slots_unmasked          $82..85 = z₁(4..7)
  203. copy_slot_unmasked             $86 = z₁(8)
  204. cmpeq_n_floats                 $69..77 = equal($69..77, $78..86)
  205. bitwise_and_4_ints             $70..73 &= $74..77
  206. bitwise_and_2_ints             $70..71 &= $72..73
  207. bitwise_and_int                $70 &= $71
  208. bitwise_and_int                $69 &= $70
  209. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($69)
  210. load_return_mask               RetMask = $68
  211. copy_slot_unmasked             $68 = [test_no_op_scalar_X_mat3].result
  212. label                          label 0x00000007
  213. copy_slot_masked               $67 = Mask($68)
  214. label                          label 0x00000005
  215. load_condition_mask            CondMask = $51
  216. zero_slot_unmasked             $98 = 0
  217. merge_condition_mask           CondMask = $66 & $67
  218. branch_if_no_lanes_active      branch_if_no_lanes_active +161 (label 4 at #379)
  219. store_return_mask              $99 = RetMask
  220. copy_4_constants               testMatrix4x4(0..3) = testInputs
  221. copy_4_constants               testMatrix4x4(4..7) = testInputs
  222. copy_4_constants               testMatrix4x4(8..11) = testInputs
  223. copy_4_constants               testMatrix4x4(12..15) = testInputs
  224. zero_4_slots_unmasked          m₂(0..3) = 0
  225. zero_4_slots_unmasked          m₂(4..7) = 0
  226. zero_4_slots_unmasked          m₂(8..11) = 0
  227. zero_4_slots_unmasked          m₂(12..15) = 0
  228. zero_4_slots_unmasked          mm₂(0..3) = 0
  229. zero_4_slots_unmasked          mm₂(4..7) = 0
  230. zero_4_slots_unmasked          mm₂(8..11) = 0
  231. zero_4_slots_unmasked          mm₂(12..15) = 0
  232. zero_2_slots_unmasked          $100..101 = 0
  233. shuffle                        $100..115 = ($100..115)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  234. copy_4_slots_unmasked          z₂(0..3) = $100..103
  235. copy_4_slots_unmasked          z₂(4..7) = $104..107
  236. copy_4_slots_unmasked          z₂(8..11) = $108..111
  237. copy_4_slots_unmasked          z₂(12..15) = $112..115
  238. copy_4_slots_unmasked          $100..103 = testMatrix4x4(0..3)
  239. copy_4_slots_unmasked          $104..107 = testMatrix4x4(4..7)
  240. copy_4_slots_unmasked          $108..111 = testMatrix4x4(8..11)
  241. copy_4_slots_unmasked          $112..115 = testMatrix4x4(12..15)
  242. copy_4_slots_masked            m₂(0..3) = Mask($100..103)
  243. copy_4_slots_masked            m₂(4..7) = Mask($104..107)
  244. copy_4_slots_masked            m₂(8..11) = Mask($108..111)
  245. copy_4_slots_masked            m₂(12..15) = Mask($112..115)
  246. copy_4_slots_unmasked          $100..103 = testMatrix4x4(0..3)
  247. copy_4_slots_unmasked          $104..107 = testMatrix4x4(4..7)
  248. copy_4_slots_unmasked          $108..111 = testMatrix4x4(8..11)
  249. copy_4_slots_unmasked          $112..115 = testMatrix4x4(12..15)
  250. copy_4_slots_masked            m₂(0..3) = Mask($100..103)
  251. copy_4_slots_masked            m₂(4..7) = Mask($104..107)
  252. copy_4_slots_masked            m₂(8..11) = Mask($108..111)
  253. copy_4_slots_masked            m₂(12..15) = Mask($112..115)
  254. store_condition_mask           $100 = CondMask
  255. copy_4_slots_unmasked          $101..104 = m₂(0..3)
  256. copy_4_slots_unmasked          $105..108 = m₂(4..7)
  257. copy_4_slots_unmasked          $109..112 = m₂(8..11)
  258. copy_4_slots_unmasked          $113..116 = m₂(12..15)
  259. copy_4_slots_unmasked          $117..120 = testMatrix4x4(0..3)
  260. copy_4_slots_unmasked          $121..124 = testMatrix4x4(4..7)
  261. copy_4_slots_unmasked          $125..128 = testMatrix4x4(8..11)
  262. copy_4_slots_unmasked          $129..132 = testMatrix4x4(12..15)
  263. cmpne_n_floats                 $101..116 = notEqual($101..116, $117..132)
  264. bitwise_or_4_ints              $109..112 |= $113..116
  265. bitwise_or_4_ints              $105..108 |= $109..112
  266. bitwise_or_4_ints              $101..104 |= $105..108
  267. bitwise_or_2_ints              $101..102 |= $103..104
  268. bitwise_or_int                 $101 |= $102
  269. merge_condition_mask           CondMask = $100 & $101
  270. zero_slot_unmasked             $102 = 0
  271. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($102)
  272. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  273. load_condition_mask            CondMask = $100
  274. store_condition_mask           $100 = CondMask
  275. copy_4_slots_unmasked          $101..104 = m₂(0..3)
  276. copy_4_slots_unmasked          $105..108 = m₂(4..7)
  277. copy_4_slots_unmasked          $109..112 = m₂(8..11)
  278. copy_4_slots_unmasked          $113..116 = m₂(12..15)
  279. copy_4_slots_unmasked          $117..120 = testMatrix4x4(0..3)
  280. copy_4_slots_unmasked          $121..124 = testMatrix4x4(4..7)
  281. copy_4_slots_unmasked          $125..128 = testMatrix4x4(8..11)
  282. copy_4_slots_unmasked          $129..132 = testMatrix4x4(12..15)
  283. cmpne_n_floats                 $101..116 = notEqual($101..116, $117..132)
  284. bitwise_or_4_ints              $109..112 |= $113..116
  285. bitwise_or_4_ints              $105..108 |= $109..112
  286. bitwise_or_4_ints              $101..104 |= $105..108
  287. bitwise_or_2_ints              $101..102 |= $103..104
  288. bitwise_or_int                 $101 |= $102
  289. merge_condition_mask           CondMask = $100 & $101
  290. zero_slot_unmasked             $102 = 0
  291. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($102)
  292. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  293. load_condition_mask            CondMask = $100
  294. store_condition_mask           $100 = CondMask
  295. copy_4_slots_unmasked          $101..104 = m₂(0..3)
  296. copy_4_slots_unmasked          $105..108 = m₂(4..7)
  297. copy_4_slots_unmasked          $109..112 = m₂(8..11)
  298. copy_4_slots_unmasked          $113..116 = m₂(12..15)
  299. copy_4_slots_unmasked          $117..120 = testMatrix4x4(0..3)
  300. copy_4_slots_unmasked          $121..124 = testMatrix4x4(4..7)
  301. copy_4_slots_unmasked          $125..128 = testMatrix4x4(8..11)
  302. copy_4_slots_unmasked          $129..132 = testMatrix4x4(12..15)
  303. cmpne_n_floats                 $101..116 = notEqual($101..116, $117..132)
  304. bitwise_or_4_ints              $109..112 |= $113..116
  305. bitwise_or_4_ints              $105..108 |= $109..112
  306. bitwise_or_4_ints              $101..104 |= $105..108
  307. bitwise_or_2_ints              $101..102 |= $103..104
  308. bitwise_or_int                 $101 |= $102
  309. merge_condition_mask           CondMask = $100 & $101
  310. zero_slot_unmasked             $102 = 0
  311. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($102)
  312. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  313. load_condition_mask            CondMask = $100
  314. zero_4_slots_unmasked          $100..103 = 0
  315. zero_4_slots_unmasked          $104..107 = 0
  316. zero_4_slots_unmasked          $108..111 = 0
  317. zero_4_slots_unmasked          $112..115 = 0
  318. copy_4_slots_unmasked          $116..119 = m₂(0..3)
  319. copy_4_slots_unmasked          $120..123 = m₂(4..7)
  320. copy_4_slots_unmasked          $124..127 = m₂(8..11)
  321. copy_4_slots_unmasked          $128..131 = m₂(12..15)
  322. sub_n_floats                   $100..115 -= $116..131
  323. copy_4_slots_masked            m₂(0..3) = Mask($100..103)
  324. copy_4_slots_masked            m₂(4..7) = Mask($104..107)
  325. copy_4_slots_masked            m₂(8..11) = Mask($108..111)
  326. copy_4_slots_masked            m₂(12..15) = Mask($112..115)
  327. store_condition_mask           $100 = CondMask
  328. copy_4_slots_unmasked          $101..104 = m₂(0..3)
  329. copy_4_slots_unmasked          $105..108 = m₂(4..7)
  330. copy_4_slots_unmasked          $109..112 = m₂(8..11)
  331. copy_4_slots_unmasked          $113..116 = m₂(12..15)
  332. zero_4_slots_unmasked          $117..120 = 0
  333. zero_4_slots_unmasked          $121..124 = 0
  334. zero_4_slots_unmasked          $125..128 = 0
  335. zero_4_slots_unmasked          $129..132 = 0
  336. copy_4_slots_unmasked          $133..136 = testMatrix4x4(0..3)
  337. copy_4_slots_unmasked          $137..140 = testMatrix4x4(4..7)
  338. copy_4_slots_unmasked          $141..144 = testMatrix4x4(8..11)
  339. copy_4_slots_unmasked          $145..148 = testMatrix4x4(12..15)
  340. sub_n_floats                   $117..132 -= $133..148
  341. cmpne_n_floats                 $101..116 = notEqual($101..116, $117..132)
  342. bitwise_or_4_ints              $109..112 |= $113..116
  343. bitwise_or_4_ints              $105..108 |= $109..112
  344. bitwise_or_4_ints              $101..104 |= $105..108
  345. bitwise_or_2_ints              $101..102 |= $103..104
  346. bitwise_or_int                 $101 |= $102
  347. merge_condition_mask           CondMask = $100 & $101
  348. zero_slot_unmasked             $102 = 0
  349. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($102)
  350. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  351. load_condition_mask            CondMask = $100
  352. zero_2_slots_unmasked          $100..101 = 0
  353. shuffle                        $100..115 = ($100..115)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  354. copy_4_slots_masked            mm₂(0..3) = Mask($100..103)
  355. copy_4_slots_masked            mm₂(4..7) = Mask($104..107)
  356. copy_4_slots_masked            mm₂(8..11) = Mask($108..111)
  357. copy_4_slots_masked            mm₂(12..15) = Mask($112..115)
  358. zero_2_slots_unmasked          $100..101 = 0
  359. shuffle                        $100..115 = ($100..115)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  360. copy_4_slots_masked            mm₂(0..3) = Mask($100..103)
  361. copy_4_slots_masked            mm₂(4..7) = Mask($104..107)
  362. copy_4_slots_masked            mm₂(8..11) = Mask($108..111)
  363. copy_4_slots_masked            mm₂(12..15) = Mask($112..115)
  364. copy_4_slots_unmasked          $116..119 = z₂(0..3)
  365. copy_4_slots_unmasked          $120..123 = z₂(4..7)
  366. copy_4_slots_unmasked          $124..127 = z₂(8..11)
  367. copy_4_slots_unmasked          $128..131 = z₂(12..15)
  368. cmpeq_n_floats                 $100..115 = equal($100..115, $116..131)
  369. bitwise_and_4_ints             $108..111 &= $112..115
  370. bitwise_and_4_ints             $104..107 &= $108..111
  371. bitwise_and_4_ints             $100..103 &= $104..107
  372. bitwise_and_2_ints             $100..101 &= $102..103
  373. bitwise_and_int                $100 &= $101
  374. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($100)
  375. load_return_mask               RetMask = $99
  376. copy_slot_unmasked             $99 = [test_no_op_scalar_X_mat4].result
  377. label                          label 0x00000008
  378. copy_slot_masked               $98 = Mask($99)
  379. label                          label 0x00000004
  380. load_condition_mask            CondMask = $66
  381. zero_slot_unmasked             $150 = 0
  382. merge_condition_mask           CondMask = $97 & $98
  383. branch_if_no_lanes_active      branch_if_no_lanes_active +116 (label 3 at #499)
  384. store_return_mask              $151 = RetMask
  385. zero_4_slots_unmasked          m₃ = 0
  386. zero_4_slots_unmasked          mm₃ = 0
  387. zero_2_slots_unmasked          $152..153 = 0
  388. swizzle_4                      $152..155 = ($152..155).yxxy
  389. copy_4_slots_unmasked          z₃ = $152..155
  390. copy_constant                  $152 = 0x3F800000 (1.0)
  391. swizzle_4                      $152..155 = ($152..155).xxxx
  392. copy_4_slots_unmasked          s = $152..155
  393. copy_constant                  scalar = testInputs(0)
  394. zero_slot_unmasked             $152 = 0
  395. copy_slot_unmasked             $153 = scalar
  396. swizzle_4                      $152..155 = ($152..155).yxxy
  397. copy_4_slots_masked            m₃ = Mask($152..155)
  398. zero_slot_unmasked             $152 = 0
  399. copy_slot_unmasked             $153 = scalar
  400. swizzle_4                      $152..155 = ($152..155).yxxy
  401. copy_4_slots_masked            m₃ = Mask($152..155)
  402. store_condition_mask           $152 = CondMask
  403. copy_4_slots_unmasked          $153..156 = m₃
  404. zero_slot_unmasked             $157 = 0
  405. copy_slot_unmasked             $158 = scalar
  406. swizzle_4                      $157..160 = ($157..160).yxxy
  407. cmpne_4_floats                 $153..156 = notEqual($153..156, $157..160)
  408. bitwise_or_2_ints              $153..154 |= $155..156
  409. bitwise_or_int                 $153 |= $154
  410. merge_condition_mask           CondMask = $152 & $153
  411. zero_slot_unmasked             $154 = 0
  412. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($154)
  413. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  414. load_condition_mask            CondMask = $152
  415. copy_slot_unmasked             $152 = scalar
  416. swizzle_4                      $152..155 = ($152..155).xxxx
  417. copy_4_slots_unmasked          $156..159 = s
  418. div_4_floats                   $152..155 /= $156..159
  419. copy_4_slots_masked            m₃ = Mask($152..155)
  420. store_condition_mask           $152 = CondMask
  421. copy_4_slots_unmasked          $153..156 = m₃
  422. copy_slot_unmasked             $157 = scalar
  423. copy_slot_unmasked             $158 = scalar
  424. copy_slot_unmasked             $159 = scalar
  425. copy_slot_unmasked             $160 = scalar
  426. cmpne_4_floats                 $153..156 = notEqual($153..156, $157..160)
  427. bitwise_or_2_ints              $153..154 |= $155..156
  428. bitwise_or_int                 $153 |= $154
  429. merge_condition_mask           CondMask = $152 & $153
  430. zero_slot_unmasked             $154 = 0
  431. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($154)
  432. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  433. load_condition_mask            CondMask = $152
  434. copy_slot_unmasked             $152 = scalar
  435. swizzle_4                      $152..155 = ($152..155).xxxx
  436. copy_4_slots_unmasked          $156..159 = z₃
  437. add_4_floats                   $152..155 += $156..159
  438. copy_4_slots_masked            m₃ = Mask($152..155)
  439. copy_4_slots_unmasked          $152..155 = z₃
  440. copy_slot_unmasked             $156 = scalar
  441. swizzle_4                      $156..159 = ($156..159).xxxx
  442. add_4_floats                   $152..155 += $156..159
  443. copy_4_slots_masked            m₃ = Mask($152..155)
  444. store_condition_mask           $152 = CondMask
  445. copy_4_slots_unmasked          $153..156 = m₃
  446. copy_slot_unmasked             $157 = scalar
  447. copy_slot_unmasked             $158 = scalar
  448. copy_slot_unmasked             $159 = scalar
  449. copy_slot_unmasked             $160 = scalar
  450. cmpne_4_floats                 $153..156 = notEqual($153..156, $157..160)
  451. bitwise_or_2_ints              $153..154 |= $155..156
  452. bitwise_or_int                 $153 |= $154
  453. merge_condition_mask           CondMask = $152 & $153
  454. zero_slot_unmasked             $154 = 0
  455. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($154)
  456. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  457. load_condition_mask            CondMask = $152
  458. copy_slot_unmasked             $152 = scalar
  459. swizzle_4                      $152..155 = ($152..155).xxxx
  460. copy_4_slots_unmasked          $156..159 = z₃
  461. sub_4_floats                   $152..155 -= $156..159
  462. copy_4_slots_masked            m₃ = Mask($152..155)
  463. copy_4_slots_unmasked          $152..155 = z₃
  464. copy_slot_unmasked             $156 = scalar
  465. swizzle_4                      $156..159 = ($156..159).xxxx
  466. sub_4_floats                   $152..155 -= $156..159
  467. copy_4_slots_masked            m₃ = Mask($152..155)
  468. store_condition_mask           $152 = CondMask
  469. copy_4_slots_unmasked          $153..156 = m₃
  470. zero_4_slots_unmasked          $157..160 = 0
  471. copy_slot_unmasked             $161 = scalar
  472. copy_slot_unmasked             $162 = scalar
  473. copy_slot_unmasked             $163 = scalar
  474. copy_slot_unmasked             $164 = scalar
  475. sub_4_floats                   $157..160 -= $161..164
  476. cmpne_4_floats                 $153..156 = notEqual($153..156, $157..160)
  477. bitwise_or_2_ints              $153..154 |= $155..156
  478. bitwise_or_int                 $153 |= $154
  479. merge_condition_mask           CondMask = $152 & $153
  480. zero_slot_unmasked             $154 = 0
  481. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($154)
  482. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  483. load_condition_mask            CondMask = $152
  484. zero_2_slots_unmasked          $152..153 = 0
  485. swizzle_4                      $152..155 = ($152..155).yxxy
  486. copy_4_slots_masked            mm₃ = Mask($152..155)
  487. zero_2_slots_unmasked          $152..153 = 0
  488. swizzle_4                      $152..155 = ($152..155).yxxy
  489. copy_4_slots_masked            mm₃ = Mask($152..155)
  490. copy_4_slots_unmasked          $156..159 = z₃
  491. cmpeq_4_floats                 $152..155 = equal($152..155, $156..159)
  492. bitwise_and_2_ints             $152..153 &= $154..155
  493. bitwise_and_int                $152 &= $153
  494. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($152)
  495. load_return_mask               RetMask = $151
  496. copy_slot_unmasked             $151 = [test_no_op_mat2_X_scalar].result
  497. label                          label 0x00000009
  498. copy_slot_masked               $150 = Mask($151)
  499. label                          label 0x00000003
  500. load_condition_mask            CondMask = $97
  501. zero_slot_unmasked             $166 = 0
  502. stack_rewind
  503. merge_condition_mask           CondMask = $149 & $150
  504. branch_if_no_lanes_active      branch_if_no_lanes_active +187 (label 2 at #691)
  505. store_return_mask              $167 = RetMask
  506. zero_4_slots_unmasked          m₄(0..3) = 0
  507. zero_4_slots_unmasked          m₄(4..7) = 0
  508. zero_4_slots_unmasked          m₄(8), mm₄(0..2) = 0
  509. zero_4_slots_unmasked          mm₄(3..6) = 0
  510. zero_2_slots_unmasked          mm₄(7..8) = 0
  511. zero_2_slots_unmasked          $168..169 = 0
  512. shuffle                        $168..176 = ($168..176)[1 0 0 0 1 0 0 0 1]
  513. copy_4_slots_unmasked          z₄(0..3) = $168..171
  514. copy_4_slots_unmasked          z₄(4..7) = $172..175
  515. copy_slot_unmasked             z₄(8) = $176
  516. copy_constant                  $168 = 0x3F800000 (1.0)
  517. swizzle_3                      $168..170 = ($168..170).xxx
  518. copy_constant                  $171 = 0x3F800000 (1.0)
  519. swizzle_3                      $171..173 = ($171..173).xxx
  520. copy_constant                  $174 = 0x3F800000 (1.0)
  521. swizzle_3                      $174..176 = ($174..176).xxx
  522. copy_4_slots_unmasked          s₁(0..3) = $168..171
  523. copy_4_slots_unmasked          s₁(4..7) = $172..175
  524. copy_slot_unmasked             s₁(8) = $176
  525. copy_constant                  scalar₁ = testInputs(0)
  526. copy_slot_unmasked             $168 = scalar₁
  527. swizzle_3                      $168..170 = ($168..170).xxx
  528. copy_3_slots_unmasked          scalar3 = $168..170
  529. zero_slot_unmasked             $168 = 0
  530. copy_slot_unmasked             $169 = scalar₁
  531. shuffle                        $168..176 = ($168..176)[1 0 0 0 1 0 0 0 1]
  532. copy_4_slots_masked            m₄(0..3) = Mask($168..171)
  533. copy_4_slots_masked            m₄(4..7) = Mask($172..175)
  534. copy_slot_masked               m₄(8) = Mask($176)
  535. zero_slot_unmasked             $168 = 0
  536. copy_slot_unmasked             $169 = scalar₁
  537. shuffle                        $168..176 = ($168..176)[1 0 0 0 1 0 0 0 1]
  538. copy_4_slots_masked            m₄(0..3) = Mask($168..171)
  539. copy_4_slots_masked            m₄(4..7) = Mask($172..175)
  540. copy_slot_masked               m₄(8) = Mask($176)
  541. store_condition_mask           $168 = CondMask
  542. copy_4_slots_unmasked          $169..172 = m₄(0..3)
  543. copy_4_slots_unmasked          $173..176 = m₄(4..7)
  544. copy_slot_unmasked             $177 = m₄(8)
  545. zero_slot_unmasked             $178 = 0
  546. copy_slot_unmasked             $179 = scalar₁
  547. shuffle                        $178..186 = ($178..186)[1 0 0 0 1 0 0 0 1]
  548. cmpne_n_floats                 $169..177 = notEqual($169..177, $178..186)
  549. bitwise_or_4_ints              $170..173 |= $174..177
  550. bitwise_or_2_ints              $170..171 |= $172..173
  551. bitwise_or_int                 $170 |= $171
  552. bitwise_or_int                 $169 |= $170
  553. merge_condition_mask           CondMask = $168 & $169
  554. zero_slot_unmasked             $170 = 0
  555. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($170)
  556. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  557. load_condition_mask            CondMask = $168
  558. copy_slot_unmasked             $168 = scalar₁
  559. swizzle_4                      $168..171 = ($168..171).xxxx
  560. copy_4_slots_unmasked          $172..175 = $168..171
  561. copy_slot_unmasked             $176 = $175
  562. copy_4_slots_unmasked          $177..180 = s₁(0..3)
  563. copy_4_slots_unmasked          $181..184 = s₁(4..7)
  564. copy_slot_unmasked             $185 = s₁(8)
  565. div_n_floats                   $168..176 /= $177..185
  566. copy_4_slots_masked            m₄(0..3) = Mask($168..171)
  567. copy_4_slots_masked            m₄(4..7) = Mask($172..175)
  568. copy_slot_masked               m₄(8) = Mask($176)
  569. store_condition_mask           $168 = CondMask
  570. copy_4_slots_unmasked          $169..172 = m₄(0..3)
  571. copy_4_slots_unmasked          $173..176 = m₄(4..7)
  572. copy_slot_unmasked             $177 = m₄(8)
  573. copy_3_slots_unmasked          $178..180 = scalar3
  574. copy_3_slots_unmasked          $181..183 = scalar3
  575. copy_3_slots_unmasked          $184..186 = scalar3
  576. cmpne_n_floats                 $169..177 = notEqual($169..177, $178..186)
  577. bitwise_or_4_ints              $170..173 |= $174..177
  578. bitwise_or_2_ints              $170..171 |= $172..173
  579. bitwise_or_int                 $170 |= $171
  580. bitwise_or_int                 $169 |= $170
  581. merge_condition_mask           CondMask = $168 & $169
  582. zero_slot_unmasked             $170 = 0
  583. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($170)
  584. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  585. load_condition_mask            CondMask = $168
  586. copy_slot_unmasked             $168 = scalar₁
  587. swizzle_4                      $168..171 = ($168..171).xxxx
  588. copy_4_slots_unmasked          $172..175 = $168..171
  589. copy_slot_unmasked             $176 = $175
  590. copy_4_slots_unmasked          $177..180 = z₄(0..3)
  591. copy_4_slots_unmasked          $181..184 = z₄(4..7)
  592. copy_slot_unmasked             $185 = z₄(8)
  593. add_n_floats                   $168..176 += $177..185
  594. copy_4_slots_masked            m₄(0..3) = Mask($168..171)
  595. copy_4_slots_masked            m₄(4..7) = Mask($172..175)
  596. copy_slot_masked               m₄(8) = Mask($176)
  597. copy_4_slots_unmasked          $168..171 = z₄(0..3)
  598. copy_4_slots_unmasked          $172..175 = z₄(4..7)
  599. copy_slot_unmasked             $176 = z₄(8)
  600. copy_slot_unmasked             $177 = scalar₁
  601. swizzle_4                      $177..180 = ($177..180).xxxx
  602. copy_4_slots_unmasked          $181..184 = $177..180
  603. copy_slot_unmasked             $185 = $184
  604. add_n_floats                   $168..176 += $177..185
  605. copy_4_slots_masked            m₄(0..3) = Mask($168..171)
  606. copy_4_slots_masked            m₄(4..7) = Mask($172..175)
  607. copy_slot_masked               m₄(8) = Mask($176)
  608. store_condition_mask           $168 = CondMask
  609. copy_4_slots_unmasked          $169..172 = m₄(0..3)
  610. copy_4_slots_unmasked          $173..176 = m₄(4..7)
  611. copy_slot_unmasked             $177 = m₄(8)
  612. copy_3_slots_unmasked          $178..180 = scalar3
  613. copy_3_slots_unmasked          $181..183 = scalar3
  614. copy_3_slots_unmasked          $184..186 = scalar3
  615. cmpne_n_floats                 $169..177 = notEqual($169..177, $178..186)
  616. bitwise_or_4_ints              $170..173 |= $174..177
  617. bitwise_or_2_ints              $170..171 |= $172..173
  618. bitwise_or_int                 $170 |= $171
  619. bitwise_or_int                 $169 |= $170
  620. merge_condition_mask           CondMask = $168 & $169
  621. zero_slot_unmasked             $170 = 0
  622. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($170)
  623. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  624. load_condition_mask            CondMask = $168
  625. copy_slot_unmasked             $168 = scalar₁
  626. swizzle_4                      $168..171 = ($168..171).xxxx
  627. copy_4_slots_unmasked          $172..175 = $168..171
  628. copy_slot_unmasked             $176 = $175
  629. copy_4_slots_unmasked          $177..180 = z₄(0..3)
  630. copy_4_slots_unmasked          $181..184 = z₄(4..7)
  631. copy_slot_unmasked             $185 = z₄(8)
  632. sub_n_floats                   $168..176 -= $177..185
  633. copy_4_slots_masked            m₄(0..3) = Mask($168..171)
  634. copy_4_slots_masked            m₄(4..7) = Mask($172..175)
  635. copy_slot_masked               m₄(8) = Mask($176)
  636. copy_4_slots_unmasked          $168..171 = z₄(0..3)
  637. copy_4_slots_unmasked          $172..175 = z₄(4..7)
  638. copy_slot_unmasked             $176 = z₄(8)
  639. copy_slot_unmasked             $177 = scalar₁
  640. swizzle_4                      $177..180 = ($177..180).xxxx
  641. copy_4_slots_unmasked          $181..184 = $177..180
  642. copy_slot_unmasked             $185 = $184
  643. sub_n_floats                   $168..176 -= $177..185
  644. copy_4_slots_masked            m₄(0..3) = Mask($168..171)
  645. copy_4_slots_masked            m₄(4..7) = Mask($172..175)
  646. copy_slot_masked               m₄(8) = Mask($176)
  647. store_condition_mask           $168 = CondMask
  648. copy_4_slots_unmasked          $169..172 = m₄(0..3)
  649. copy_4_slots_unmasked          $173..176 = m₄(4..7)
  650. copy_slot_unmasked             $177 = m₄(8)
  651. zero_4_slots_unmasked          $178..181 = 0
  652. zero_4_slots_unmasked          $182..185 = 0
  653. zero_slot_unmasked             $186 = 0
  654. copy_3_slots_unmasked          $187..189 = scalar3
  655. copy_3_slots_unmasked          $190..192 = scalar3
  656. copy_3_slots_unmasked          $193..195 = scalar3
  657. sub_n_floats                   $178..186 -= $187..195
  658. cmpne_n_floats                 $169..177 = notEqual($169..177, $178..186)
  659. bitwise_or_4_ints              $170..173 |= $174..177
  660. bitwise_or_2_ints              $170..171 |= $172..173
  661. bitwise_or_int                 $170 |= $171
  662. bitwise_or_int                 $169 |= $170
  663. merge_condition_mask           CondMask = $168 & $169
  664. zero_slot_unmasked             $170 = 0
  665. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($170)
  666. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  667. load_condition_mask            CondMask = $168
  668. zero_2_slots_unmasked          $168..169 = 0
  669. shuffle                        $168..176 = ($168..176)[1 0 0 0 1 0 0 0 1]
  670. copy_4_slots_masked            mm₄(0..3) = Mask($168..171)
  671. copy_4_slots_masked            mm₄(4..7) = Mask($172..175)
  672. copy_slot_masked               mm₄(8) = Mask($176)
  673. zero_2_slots_unmasked          $168..169 = 0
  674. shuffle                        $168..176 = ($168..176)[1 0 0 0 1 0 0 0 1]
  675. copy_4_slots_masked            mm₄(0..3) = Mask($168..171)
  676. copy_4_slots_masked            mm₄(4..7) = Mask($172..175)
  677. copy_slot_masked               mm₄(8) = Mask($176)
  678. copy_4_slots_unmasked          $177..180 = z₄(0..3)
  679. copy_4_slots_unmasked          $181..184 = z₄(4..7)
  680. copy_slot_unmasked             $185 = z₄(8)
  681. cmpeq_n_floats                 $168..176 = equal($168..176, $177..185)
  682. bitwise_and_4_ints             $169..172 &= $173..176
  683. bitwise_and_2_ints             $169..170 &= $171..172
  684. bitwise_and_int                $169 &= $170
  685. bitwise_and_int                $168 &= $169
  686. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($168)
  687. load_return_mask               RetMask = $167
  688. copy_slot_unmasked             $167 = [test_no_op_mat3_X_scalar].result
  689. label                          label 0x0000000A
  690. copy_slot_masked               $166 = Mask($167)
  691. label                          label 0x00000002
  692. load_condition_mask            CondMask = $149
  693. zero_slot_unmasked             $0 = 0
  694. merge_condition_mask           CondMask = $165 & $166
  695. branch_if_no_lanes_active      branch_if_no_lanes_active +227 (label 1 at #922)
  696. store_return_mask              $1 = RetMask
  697. zero_4_slots_unmasked          m₅(0..3) = 0
  698. zero_4_slots_unmasked          m₅(4..7) = 0
  699. zero_4_slots_unmasked          m₅(8..11) = 0
  700. zero_4_slots_unmasked          m₅(12..15) = 0
  701. zero_4_slots_unmasked          mm₅(0..3) = 0
  702. zero_4_slots_unmasked          mm₅(4..7) = 0
  703. zero_4_slots_unmasked          mm₅(8..11) = 0
  704. zero_4_slots_unmasked          mm₅(12..15) = 0
  705. zero_2_slots_unmasked          $2..3 = 0
  706. shuffle                        $2..17 = ($2..17)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  707. copy_4_slots_unmasked          z₅(0..3) = $2..5
  708. copy_4_slots_unmasked          z₅(4..7) = $6..9
  709. copy_4_slots_unmasked          z₅(8..11) = $10..13
  710. copy_4_slots_unmasked          z₅(12..15) = $14..17
  711. copy_constant                  $2 = 0x3F800000 (1.0)
  712. swizzle_4                      $2..5 = ($2..5).xxxx
  713. copy_constant                  $6 = 0x3F800000 (1.0)
  714. swizzle_4                      $6..9 = ($6..9).xxxx
  715. copy_constant                  $10 = 0x3F800000 (1.0)
  716. swizzle_4                      $10..13 = ($10..13).xxxx
  717. copy_constant                  $14 = 0x3F800000 (1.0)
  718. swizzle_4                      $14..17 = ($14..17).xxxx
  719. copy_4_slots_unmasked          s₂(0..3) = $2..5
  720. copy_4_slots_unmasked          s₂(4..7) = $6..9
  721. copy_4_slots_unmasked          s₂(8..11) = $10..13
  722. copy_4_slots_unmasked          s₂(12..15) = $14..17
  723. copy_constant                  scalar₂ = testInputs(0)
  724. copy_slot_unmasked             $2 = scalar₂
  725. swizzle_4                      $2..5 = ($2..5).xxxx
  726. copy_4_slots_unmasked          scalar4 = $2..5
  727. zero_slot_unmasked             $2 = 0
  728. copy_slot_unmasked             $3 = scalar₂
  729. shuffle                        $2..17 = ($2..17)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  730. copy_4_slots_masked            m₅(0..3) = Mask($2..5)
  731. copy_4_slots_masked            m₅(4..7) = Mask($6..9)
  732. copy_4_slots_masked            m₅(8..11) = Mask($10..13)
  733. copy_4_slots_masked            m₅(12..15) = Mask($14..17)
  734. zero_slot_unmasked             $2 = 0
  735. copy_slot_unmasked             $3 = scalar₂
  736. shuffle                        $2..17 = ($2..17)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  737. copy_4_slots_masked            m₅(0..3) = Mask($2..5)
  738. copy_4_slots_masked            m₅(4..7) = Mask($6..9)
  739. copy_4_slots_masked            m₅(8..11) = Mask($10..13)
  740. copy_4_slots_masked            m₅(12..15) = Mask($14..17)
  741. store_condition_mask           $2 = CondMask
  742. copy_4_slots_unmasked          $3..6 = m₅(0..3)
  743. copy_4_slots_unmasked          $7..10 = m₅(4..7)
  744. copy_4_slots_unmasked          $11..14 = m₅(8..11)
  745. copy_4_slots_unmasked          $15..18 = m₅(12..15)
  746. zero_slot_unmasked             $19 = 0
  747. copy_slot_unmasked             $20 = scalar₂
  748. shuffle                        $19..34 = ($19..34)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  749. cmpne_n_floats                 $3..18 = notEqual($3..18, $19..34)
  750. bitwise_or_4_ints              $11..14 |= $15..18
  751. bitwise_or_4_ints              $7..10 |= $11..14
  752. bitwise_or_4_ints              $3..6 |= $7..10
  753. bitwise_or_2_ints              $3..4 |= $5..6
  754. bitwise_or_int                 $3 |= $4
  755. merge_condition_mask           CondMask = $2 & $3
  756. zero_slot_unmasked             $4 = 0
  757. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($4)
  758. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  759. load_condition_mask            CondMask = $2
  760. copy_slot_unmasked             $2 = scalar₂
  761. swizzle_4                      $2..5 = ($2..5).xxxx
  762. copy_4_slots_unmasked          $6..9 = $2..5
  763. copy_4_slots_unmasked          $10..13 = $6..9
  764. copy_4_slots_unmasked          $14..17 = $10..13
  765. copy_4_slots_unmasked          $18..21 = s₂(0..3)
  766. copy_4_slots_unmasked          $22..25 = s₂(4..7)
  767. copy_4_slots_unmasked          $26..29 = s₂(8..11)
  768. copy_4_slots_unmasked          $30..33 = s₂(12..15)
  769. div_n_floats                   $2..17 /= $18..33
  770. copy_4_slots_masked            m₅(0..3) = Mask($2..5)
  771. copy_4_slots_masked            m₅(4..7) = Mask($6..9)
  772. copy_4_slots_masked            m₅(8..11) = Mask($10..13)
  773. copy_4_slots_masked            m₅(12..15) = Mask($14..17)
  774. store_condition_mask           $2 = CondMask
  775. copy_4_slots_unmasked          $3..6 = m₅(0..3)
  776. copy_4_slots_unmasked          $7..10 = m₅(4..7)
  777. copy_4_slots_unmasked          $11..14 = m₅(8..11)
  778. copy_4_slots_unmasked          $15..18 = m₅(12..15)
  779. copy_4_slots_unmasked          $19..22 = scalar4
  780. copy_4_slots_unmasked          $23..26 = scalar4
  781. copy_4_slots_unmasked          $27..30 = scalar4
  782. copy_4_slots_unmasked          $31..34 = scalar4
  783. cmpne_n_floats                 $3..18 = notEqual($3..18, $19..34)
  784. bitwise_or_4_ints              $11..14 |= $15..18
  785. bitwise_or_4_ints              $7..10 |= $11..14
  786. bitwise_or_4_ints              $3..6 |= $7..10
  787. bitwise_or_2_ints              $3..4 |= $5..6
  788. bitwise_or_int                 $3 |= $4
  789. merge_condition_mask           CondMask = $2 & $3
  790. zero_slot_unmasked             $4 = 0
  791. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($4)
  792. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  793. load_condition_mask            CondMask = $2
  794. copy_slot_unmasked             $2 = scalar₂
  795. swizzle_4                      $2..5 = ($2..5).xxxx
  796. copy_4_slots_unmasked          $6..9 = $2..5
  797. copy_4_slots_unmasked          $10..13 = $6..9
  798. copy_4_slots_unmasked          $14..17 = $10..13
  799. copy_4_slots_unmasked          $18..21 = z₅(0..3)
  800. copy_4_slots_unmasked          $22..25 = z₅(4..7)
  801. copy_4_slots_unmasked          $26..29 = z₅(8..11)
  802. copy_4_slots_unmasked          $30..33 = z₅(12..15)
  803. add_n_floats                   $2..17 += $18..33
  804. copy_4_slots_masked            m₅(0..3) = Mask($2..5)
  805. copy_4_slots_masked            m₅(4..7) = Mask($6..9)
  806. copy_4_slots_masked            m₅(8..11) = Mask($10..13)
  807. copy_4_slots_masked            m₅(12..15) = Mask($14..17)
  808. copy_4_slots_unmasked          $2..5 = z₅(0..3)
  809. copy_4_slots_unmasked          $6..9 = z₅(4..7)
  810. copy_4_slots_unmasked          $10..13 = z₅(8..11)
  811. copy_4_slots_unmasked          $14..17 = z₅(12..15)
  812. copy_slot_unmasked             $18 = scalar₂
  813. swizzle_4                      $18..21 = ($18..21).xxxx
  814. copy_4_slots_unmasked          $22..25 = $18..21
  815. copy_4_slots_unmasked          $26..29 = $22..25
  816. copy_4_slots_unmasked          $30..33 = $26..29
  817. add_n_floats                   $2..17 += $18..33
  818. copy_4_slots_masked            m₅(0..3) = Mask($2..5)
  819. copy_4_slots_masked            m₅(4..7) = Mask($6..9)
  820. copy_4_slots_masked            m₅(8..11) = Mask($10..13)
  821. copy_4_slots_masked            m₅(12..15) = Mask($14..17)
  822. store_condition_mask           $2 = CondMask
  823. copy_4_slots_unmasked          $3..6 = m₅(0..3)
  824. copy_4_slots_unmasked          $7..10 = m₅(4..7)
  825. copy_4_slots_unmasked          $11..14 = m₅(8..11)
  826. copy_4_slots_unmasked          $15..18 = m₅(12..15)
  827. copy_4_slots_unmasked          $19..22 = scalar4
  828. copy_4_slots_unmasked          $23..26 = scalar4
  829. copy_4_slots_unmasked          $27..30 = scalar4
  830. copy_4_slots_unmasked          $31..34 = scalar4
  831. cmpne_n_floats                 $3..18 = notEqual($3..18, $19..34)
  832. bitwise_or_4_ints              $11..14 |= $15..18
  833. bitwise_or_4_ints              $7..10 |= $11..14
  834. bitwise_or_4_ints              $3..6 |= $7..10
  835. bitwise_or_2_ints              $3..4 |= $5..6
  836. bitwise_or_int                 $3 |= $4
  837. merge_condition_mask           CondMask = $2 & $3
  838. zero_slot_unmasked             $4 = 0
  839. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($4)
  840. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  841. load_condition_mask            CondMask = $2
  842. copy_slot_unmasked             $2 = scalar₂
  843. swizzle_4                      $2..5 = ($2..5).xxxx
  844. copy_4_slots_unmasked          $6..9 = $2..5
  845. copy_4_slots_unmasked          $10..13 = $6..9
  846. copy_4_slots_unmasked          $14..17 = $10..13
  847. copy_4_slots_unmasked          $18..21 = z₅(0..3)
  848. copy_4_slots_unmasked          $22..25 = z₅(4..7)
  849. copy_4_slots_unmasked          $26..29 = z₅(8..11)
  850. copy_4_slots_unmasked          $30..33 = z₅(12..15)
  851. sub_n_floats                   $2..17 -= $18..33
  852. copy_4_slots_masked            m₅(0..3) = Mask($2..5)
  853. copy_4_slots_masked            m₅(4..7) = Mask($6..9)
  854. copy_4_slots_masked            m₅(8..11) = Mask($10..13)
  855. copy_4_slots_masked            m₅(12..15) = Mask($14..17)
  856. copy_4_slots_unmasked          $2..5 = z₅(0..3)
  857. copy_4_slots_unmasked          $6..9 = z₅(4..7)
  858. copy_4_slots_unmasked          $10..13 = z₅(8..11)
  859. copy_4_slots_unmasked          $14..17 = z₅(12..15)
  860. copy_slot_unmasked             $18 = scalar₂
  861. swizzle_4                      $18..21 = ($18..21).xxxx
  862. copy_4_slots_unmasked          $22..25 = $18..21
  863. copy_4_slots_unmasked          $26..29 = $22..25
  864. copy_4_slots_unmasked          $30..33 = $26..29
  865. sub_n_floats                   $2..17 -= $18..33
  866. copy_4_slots_masked            m₅(0..3) = Mask($2..5)
  867. copy_4_slots_masked            m₅(4..7) = Mask($6..9)
  868. copy_4_slots_masked            m₅(8..11) = Mask($10..13)
  869. copy_4_slots_masked            m₅(12..15) = Mask($14..17)
  870. store_condition_mask           $2 = CondMask
  871. copy_4_slots_unmasked          $3..6 = m₅(0..3)
  872. copy_4_slots_unmasked          $7..10 = m₅(4..7)
  873. copy_4_slots_unmasked          $11..14 = m₅(8..11)
  874. copy_4_slots_unmasked          $15..18 = m₅(12..15)
  875. zero_4_slots_unmasked          $19..22 = 0
  876. zero_4_slots_unmasked          $23..26 = 0
  877. zero_4_slots_unmasked          $27..30 = 0
  878. zero_4_slots_unmasked          $31..34 = 0
  879. copy_4_slots_unmasked          $35..38 = scalar4
  880. copy_4_slots_unmasked          $39..42 = scalar4
  881. copy_4_slots_unmasked          $43..46 = scalar4
  882. copy_4_slots_unmasked          $47..50 = scalar4
  883. sub_n_floats                   $19..34 -= $35..50
  884. cmpne_n_floats                 $3..18 = notEqual($3..18, $19..34)
  885. bitwise_or_4_ints              $11..14 |= $15..18
  886. bitwise_or_4_ints              $7..10 |= $11..14
  887. bitwise_or_4_ints              $3..6 |= $7..10
  888. bitwise_or_2_ints              $3..4 |= $5..6
  889. bitwise_or_int                 $3 |= $4
  890. merge_condition_mask           CondMask = $2 & $3
  891. zero_slot_unmasked             $4 = 0
  892. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($4)
  893. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  894. load_condition_mask            CondMask = $2
  895. zero_2_slots_unmasked          $2..3 = 0
  896. shuffle                        $2..17 = ($2..17)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  897. copy_4_slots_masked            mm₅(0..3) = Mask($2..5)
  898. copy_4_slots_masked            mm₅(4..7) = Mask($6..9)
  899. copy_4_slots_masked            mm₅(8..11) = Mask($10..13)
  900. copy_4_slots_masked            mm₅(12..15) = Mask($14..17)
  901. zero_2_slots_unmasked          $2..3 = 0
  902. shuffle                        $2..17 = ($2..17)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  903. copy_4_slots_masked            mm₅(0..3) = Mask($2..5)
  904. copy_4_slots_masked            mm₅(4..7) = Mask($6..9)
  905. copy_4_slots_masked            mm₅(8..11) = Mask($10..13)
  906. copy_4_slots_masked            mm₅(12..15) = Mask($14..17)
  907. copy_4_slots_unmasked          $18..21 = z₅(0..3)
  908. copy_4_slots_unmasked          $22..25 = z₅(4..7)
  909. copy_4_slots_unmasked          $26..29 = z₅(8..11)
  910. copy_4_slots_unmasked          $30..33 = z₅(12..15)
  911. cmpeq_n_floats                 $2..17 = equal($2..17, $18..33)
  912. bitwise_and_4_ints             $10..13 &= $14..17
  913. bitwise_and_4_ints             $6..9 &= $10..13
  914. bitwise_and_4_ints             $2..5 &= $6..9
  915. bitwise_and_2_ints             $2..3 &= $4..5
  916. bitwise_and_int                $2 &= $3
  917. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($2)
  918. load_return_mask               RetMask = $1
  919. copy_slot_unmasked             $1 = [test_no_op_mat4_X_scalar].result
  920. label                          label 0x0000000B
  921. copy_slot_masked               $0 = Mask($1)
  922. label                          label 0x00000001
  923. load_condition_mask            CondMask = $165
  924. swizzle_4                      $0..3 = ($0..3).xxxx
  925. copy_4_constants               $4..7 = colorRed
  926. copy_4_constants               $8..11 = colorGreen
  927. mix_4_ints                     $0..3 = mix($4..7, $8..11, $0..3)
  928. load_src                       src.rgba = $0..3
