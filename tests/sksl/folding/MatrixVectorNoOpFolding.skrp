    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. store_condition_mask           $71 = CondMask
    4. store_condition_mask           $51 = CondMask
    5. store_condition_mask           $35 = CondMask
    6. store_condition_mask           $22 = CondMask
    7. store_condition_mask           $13 = CondMask
    8. branch_if_no_lanes_active      branch_if_no_lanes_active +57 (label 6 at #65)
    9. store_return_mask              $14 = RetMask
   10. zero_4_slots_unmasked          v, vv = 0
   11. copy_2_constants               $15..16 = testInputs(0..1)
   12. copy_2_slots_masked            v = Mask($15..16)
   13. copy_2_constants               $15..16 = testInputs(0..1)
   14. copy_2_slots_masked            v = Mask($15..16)
   15. store_condition_mask           $15 = CondMask
   16. copy_2_slots_unmasked          $16..17 = v
   17. copy_2_constants               $18..19 = testInputs(0..1)
   18. cmpne_2_floats                 $16..17 = notEqual($16..17, $18..19)
   19. bitwise_or_int                 $16 |= $17
   20. merge_condition_mask           CondMask = $15 & $16
   21. zero_slot_unmasked             $17 = 0
   22. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($17)
   23. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   24. load_condition_mask            CondMask = $15
   25. store_condition_mask           $15 = CondMask
   26. copy_2_slots_unmasked          $16..17 = v
   27. copy_2_constants               $18..19 = testInputs(0..1)
   28. cmpne_2_floats                 $16..17 = notEqual($16..17, $18..19)
   29. bitwise_or_int                 $16 |= $17
   30. merge_condition_mask           CondMask = $15 & $16
   31. zero_slot_unmasked             $17 = 0
   32. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($17)
   33. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   34. load_condition_mask            CondMask = $15
   35. zero_2_slots_unmasked          $15..16 = 0
   36. copy_2_constants               $17..18 = testInputs(0..1)
   37. sub_2_floats                   $15..16 -= $17..18
   38. copy_2_slots_masked            v = Mask($15..16)
   39. zero_2_slots_unmasked          $15..16 = 0
   40. copy_2_constants               $17..18 = testInputs(0..1)
   41. sub_2_floats                   $15..16 -= $17..18
   42. copy_2_slots_masked            v = Mask($15..16)
   43. store_condition_mask           $15 = CondMask
   44. copy_2_slots_unmasked          $16..17 = v
   45. zero_2_slots_unmasked          $18..19 = 0
   46. copy_2_constants               $20..21 = testInputs(0..1)
   47. sub_2_floats                   $18..19 -= $20..21
   48. cmpne_2_floats                 $16..17 = notEqual($16..17, $18..19)
   49. bitwise_or_int                 $16 |= $17
   50. merge_condition_mask           CondMask = $15 & $16
   51. zero_slot_unmasked             $17 = 0
   52. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($17)
   53. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   54. load_condition_mask            CondMask = $15
   55. zero_2_slots_unmasked          $15..16 = 0
   56. copy_2_slots_masked            vv = Mask($15..16)
   57. zero_2_slots_unmasked          $15..16 = 0
   58. copy_2_slots_masked            vv = Mask($15..16)
   59. zero_2_slots_unmasked          $17..18 = 0
   60. cmpeq_2_floats                 $15..16 = equal($15..16, $17..18)
   61. bitwise_and_int                $15 &= $16
   62. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($15)
   63. load_return_mask               RetMask = $14
   64. copy_slot_unmasked             $14 = [test_no_op_mat2_X_vec2].result
   65. label                          label 0x00000006
   66. zero_slot_unmasked             $23 = 0
   67. merge_condition_mask           CondMask = $13 & $14
   68. branch_if_no_lanes_active      branch_if_no_lanes_active +64 (label 5 at #132)
   69. store_return_mask              $24 = RetMask
   70. zero_4_slots_unmasked          v₁, vv₁(0) = 0
   71. zero_2_slots_unmasked          vv₁(1..2) = 0
   72. copy_3_constants               $25..27 = testInputs(0..2)
   73. copy_3_slots_masked            v₁ = Mask($25..27)
   74. copy_3_constants               $25..27 = testInputs(0..2)
   75. copy_3_slots_masked            v₁ = Mask($25..27)
   76. store_condition_mask           $25 = CondMask
   77. copy_3_slots_unmasked          $26..28 = v₁
   78. copy_3_constants               $29..31 = testInputs(0..2)
   79. cmpne_3_floats                 $26..28 = notEqual($26..28, $29..31)
   80. bitwise_or_int                 $27 |= $28
   81. bitwise_or_int                 $26 |= $27
   82. merge_condition_mask           CondMask = $25 & $26
   83. zero_slot_unmasked             $27 = 0
   84. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($27)
   85. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   86. load_condition_mask            CondMask = $25
   87. store_condition_mask           $25 = CondMask
   88. copy_3_slots_unmasked          $26..28 = v₁
   89. copy_3_constants               $29..31 = testInputs(0..2)
   90. cmpne_3_floats                 $26..28 = notEqual($26..28, $29..31)
   91. bitwise_or_int                 $27 |= $28
   92. bitwise_or_int                 $26 |= $27
   93. merge_condition_mask           CondMask = $25 & $26
   94. zero_slot_unmasked             $27 = 0
   95. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($27)
   96. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   97. load_condition_mask            CondMask = $25
   98. zero_3_slots_unmasked          $25..27 = 0
   99. copy_3_constants               $28..30 = testInputs(0..2)
  100. sub_3_floats                   $25..27 -= $28..30
  101. copy_3_slots_masked            v₁ = Mask($25..27)
  102. zero_3_slots_unmasked          $25..27 = 0
  103. copy_3_constants               $28..30 = testInputs(0..2)
  104. sub_3_floats                   $25..27 -= $28..30
  105. copy_3_slots_masked            v₁ = Mask($25..27)
  106. store_condition_mask           $25 = CondMask
  107. copy_3_slots_unmasked          $26..28 = v₁
  108. zero_3_slots_unmasked          $29..31 = 0
  109. copy_3_constants               $32..34 = testInputs(0..2)
  110. sub_3_floats                   $29..31 -= $32..34
  111. cmpne_3_floats                 $26..28 = notEqual($26..28, $29..31)
  112. bitwise_or_int                 $27 |= $28
  113. bitwise_or_int                 $26 |= $27
  114. merge_condition_mask           CondMask = $25 & $26
  115. zero_slot_unmasked             $27 = 0
  116. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($27)
  117. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  118. load_condition_mask            CondMask = $25
  119. zero_3_slots_unmasked          $25..27 = 0
  120. copy_3_slots_masked            vv₁ = Mask($25..27)
  121. zero_3_slots_unmasked          $25..27 = 0
  122. copy_3_slots_masked            vv₁ = Mask($25..27)
  123. zero_3_slots_unmasked          $28..30 = 0
  124. cmpeq_3_floats                 $25..27 = equal($25..27, $28..30)
  125. bitwise_and_int                $26 &= $27
  126. bitwise_and_int                $25 &= $26
  127. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($25)
  128. load_return_mask               RetMask = $24
  129. copy_slot_unmasked             $24 = [test_no_op_mat3_X_vec3].result
  130. label                          label 0x00000007
  131. copy_slot_masked               $23 = Mask($24)
  132. label                          label 0x00000005
  133. load_condition_mask            CondMask = $13
  134. zero_slot_unmasked             $36 = 0
  135. merge_condition_mask           CondMask = $22 & $23
  136. branch_if_no_lanes_active      branch_if_no_lanes_active +64 (label 4 at #200)
  137. store_return_mask              $37 = RetMask
  138. zero_4_slots_unmasked          v₂ = 0
  139. zero_4_slots_unmasked          vv₂ = 0
  140. copy_4_constants               $38..41 = testInputs
  141. copy_4_slots_masked            v₂ = Mask($38..41)
  142. copy_4_constants               $38..41 = testInputs
  143. copy_4_slots_masked            v₂ = Mask($38..41)
  144. store_condition_mask           $38 = CondMask
  145. copy_4_slots_unmasked          $39..42 = v₂
  146. copy_4_constants               $43..46 = testInputs
  147. cmpne_4_floats                 $39..42 = notEqual($39..42, $43..46)
  148. bitwise_or_2_ints              $39..40 |= $41..42
  149. bitwise_or_int                 $39 |= $40
  150. merge_condition_mask           CondMask = $38 & $39
  151. zero_slot_unmasked             $40 = 0
  152. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($40)
  153. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  154. load_condition_mask            CondMask = $38
  155. store_condition_mask           $38 = CondMask
  156. copy_4_slots_unmasked          $39..42 = v₂
  157. copy_4_constants               $43..46 = testInputs
  158. cmpne_4_floats                 $39..42 = notEqual($39..42, $43..46)
  159. bitwise_or_2_ints              $39..40 |= $41..42
  160. bitwise_or_int                 $39 |= $40
  161. merge_condition_mask           CondMask = $38 & $39
  162. zero_slot_unmasked             $40 = 0
  163. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($40)
  164. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  165. load_condition_mask            CondMask = $38
  166. zero_4_slots_unmasked          $38..41 = 0
  167. copy_4_constants               $42..45 = testInputs
  168. sub_4_floats                   $38..41 -= $42..45
  169. copy_4_slots_masked            v₂ = Mask($38..41)
  170. zero_4_slots_unmasked          $38..41 = 0
  171. copy_4_constants               $42..45 = testInputs
  172. sub_4_floats                   $38..41 -= $42..45
  173. copy_4_slots_masked            v₂ = Mask($38..41)
  174. store_condition_mask           $38 = CondMask
  175. copy_4_slots_unmasked          $39..42 = v₂
  176. zero_4_slots_unmasked          $43..46 = 0
  177. copy_4_constants               $47..50 = testInputs
  178. sub_4_floats                   $43..46 -= $47..50
  179. cmpne_4_floats                 $39..42 = notEqual($39..42, $43..46)
  180. bitwise_or_2_ints              $39..40 |= $41..42
  181. bitwise_or_int                 $39 |= $40
  182. merge_condition_mask           CondMask = $38 & $39
  183. zero_slot_unmasked             $40 = 0
  184. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($40)
  185. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  186. load_condition_mask            CondMask = $38
  187. zero_4_slots_unmasked          $38..41 = 0
  188. copy_4_slots_masked            vv₂ = Mask($38..41)
  189. zero_4_slots_unmasked          $38..41 = 0
  190. copy_4_slots_masked            vv₂ = Mask($38..41)
  191. zero_4_slots_unmasked          $42..45 = 0
  192. cmpeq_4_floats                 $38..41 = equal($38..41, $42..45)
  193. bitwise_and_2_ints             $38..39 &= $40..41
  194. bitwise_and_int                $38 &= $39
  195. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($38)
  196. load_return_mask               RetMask = $37
  197. copy_slot_unmasked             $37 = [test_no_op_mat4_X_vec4].result
  198. label                          label 0x00000008
  199. copy_slot_masked               $36 = Mask($37)
  200. label                          label 0x00000004
  201. load_condition_mask            CondMask = $22
  202. zero_slot_unmasked             $52 = 0
  203. merge_condition_mask           CondMask = $35 & $36
  204. branch_if_no_lanes_active      branch_if_no_lanes_active +100 (label 3 at #304)
  205. store_return_mask              $53 = RetMask
  206. copy_constant                  $54 = 0xBF800000 (-1.0)
  207. copy_slot_unmasked             $55 = $54
  208. copy_2_slots_unmasked          n = $54..55
  209. copy_constant                  $54 = 0x3F800000 (1.0)
  210. copy_slot_unmasked             $55 = $54
  211. copy_2_slots_unmasked          i = $54..55
  212. zero_4_slots_unmasked          z, v₃ = 0
  213. zero_2_slots_unmasked          vv₃ = 0
  214. zero_2_slots_unmasked          $54..55 = 0
  215. copy_2_slots_masked            vv₃ = Mask($54..55)
  216. zero_2_slots_unmasked          $54..55 = 0
  217. copy_2_slots_masked            vv₃ = Mask($54..55)
  218. store_condition_mask           $54 = CondMask
  219. copy_2_slots_unmasked          $55..56 = vv₃
  220. copy_2_slots_unmasked          $57..58 = z
  221. cmpne_2_floats                 $55..56 = notEqual($55..56, $57..58)
  222. bitwise_or_int                 $55 |= $56
  223. merge_condition_mask           CondMask = $54 & $55
  224. zero_slot_unmasked             $56 = 0
  225. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($56)
  226. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  227. load_condition_mask            CondMask = $54
  228. copy_2_slots_unmasked          $22..23 = i
  229. copy_4_constants               $24..27 = testMatrix2x2
  230. copy_4_slots_unmasked          $54..57 = $22..25
  231. dot_2_floats                   $54 = dot($54..55, $56..57)
  232. copy_2_slots_unmasked          $55..56 = $22..23
  233. copy_2_slots_unmasked          $57..58 = $26..27
  234. dot_2_floats                   $55 = dot($55..56, $57..58)
  235. copy_2_slots_masked            v₃ = Mask($54..55)
  236. store_condition_mask           $54 = CondMask
  237. copy_2_slots_unmasked          $55..56 = v₃
  238. copy_constant                  $57 = 0x40400000 (3.0)
  239. copy_constant                  $58 = 0x40E00000 (7.0)
  240. cmpne_2_floats                 $55..56 = notEqual($55..56, $57..58)
  241. bitwise_or_int                 $55 |= $56
  242. merge_condition_mask           CondMask = $54 & $55
  243. zero_slot_unmasked             $56 = 0
  244. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($56)
  245. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  246. load_condition_mask            CondMask = $54
  247. copy_4_constants               $22..25 = testMatrix2x2
  248. swizzle_3                      $23..25 = ($23..25).yxz
  249. copy_2_slots_unmasked          $26..27 = i
  250. copy_2_slots_unmasked          $54..55 = $22..23
  251. copy_2_slots_unmasked          $56..57 = $26..27
  252. dot_2_floats                   $54 = dot($54..55, $56..57)
  253. copy_4_slots_unmasked          $55..58 = $24..27
  254. dot_2_floats                   $55 = dot($55..56, $57..58)
  255. copy_2_slots_masked            v₃ = Mask($54..55)
  256. store_condition_mask           $54 = CondMask
  257. copy_2_slots_unmasked          $55..56 = v₃
  258. copy_constant                  $57 = 0x40800000 (4.0)
  259. copy_constant                  $58 = 0x40C00000 (6.0)
  260. cmpne_2_floats                 $55..56 = notEqual($55..56, $57..58)
  261. bitwise_or_int                 $55 |= $56
  262. merge_condition_mask           CondMask = $54 & $55
  263. zero_slot_unmasked             $56 = 0
  264. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($56)
  265. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  266. load_condition_mask            CondMask = $54
  267. copy_2_slots_unmasked          $22..23 = n
  268. copy_4_constants               $24..27 = testMatrix2x2
  269. copy_4_slots_unmasked          $54..57 = $22..25
  270. dot_2_floats                   $54 = dot($54..55, $56..57)
  271. copy_2_slots_unmasked          $55..56 = $22..23
  272. copy_2_slots_unmasked          $57..58 = $26..27
  273. dot_2_floats                   $55 = dot($55..56, $57..58)
  274. copy_2_slots_masked            v₃ = Mask($54..55)
  275. store_condition_mask           $54 = CondMask
  276. copy_2_slots_unmasked          $55..56 = v₃
  277. copy_constant                  $57 = 0xC0400000 (-3.0)
  278. copy_constant                  $58 = 0xC0E00000 (-7.0)
  279. cmpne_2_floats                 $55..56 = notEqual($55..56, $57..58)
  280. bitwise_or_int                 $55 |= $56
  281. merge_condition_mask           CondMask = $54 & $55
  282. zero_slot_unmasked             $56 = 0
  283. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($56)
  284. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  285. load_condition_mask            CondMask = $54
  286. copy_4_constants               $22..25 = testMatrix2x2
  287. swizzle_3                      $23..25 = ($23..25).yxz
  288. copy_2_slots_unmasked          $26..27 = n
  289. copy_2_slots_unmasked          $54..55 = $22..23
  290. copy_2_slots_unmasked          $56..57 = $26..27
  291. dot_2_floats                   $54 = dot($54..55, $56..57)
  292. copy_4_slots_unmasked          $55..58 = $24..27
  293. dot_2_floats                   $55 = dot($55..56, $57..58)
  294. copy_2_slots_masked            v₃ = Mask($54..55)
  295. copy_constant                  $56 = 0xC0800000 (-4.0)
  296. copy_constant                  $57 = 0xC0C00000 (-6.0)
  297. cmpeq_2_floats                 $54..55 = equal($54..55, $56..57)
  298. bitwise_and_int                $54 &= $55
  299. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($54)
  300. load_return_mask               RetMask = $53
  301. copy_slot_unmasked             $53 = [test_no_op_vec2_X_mat2].result
  302. label                          label 0x00000009
  303. copy_slot_masked               $52 = Mask($53)
  304. label                          label 0x00000003
  305. load_condition_mask            CondMask = $35
  306. zero_slot_unmasked             $72 = 0
  307. merge_condition_mask           CondMask = $51 & $52
  308. branch_if_no_lanes_active      branch_if_no_lanes_active +134 (label 2 at #442)
  309. store_return_mask              $73 = RetMask
  310. copy_constant                  $74 = 0xBF800000 (-1.0)
  311. swizzle_3                      $74..76 = ($74..76).xxx
  312. copy_3_slots_unmasked          n₁ = $74..76
  313. copy_constant                  $74 = 0x3F800000 (1.0)
  314. swizzle_3                      $74..76 = ($74..76).xxx
  315. copy_3_slots_unmasked          i₁ = $74..76
  316. zero_4_slots_unmasked          z₁, v₄(0) = 0
  317. zero_4_slots_unmasked          v₄(1..2), vv₄(0..1) = 0
  318. zero_slot_unmasked             vv₄(2) = 0
  319. zero_3_slots_unmasked          $74..76 = 0
  320. copy_3_slots_masked            vv₄ = Mask($74..76)
  321. zero_3_slots_unmasked          $74..76 = 0
  322. copy_3_slots_masked            vv₄ = Mask($74..76)
  323. store_condition_mask           $74 = CondMask
  324. copy_3_slots_unmasked          $75..77 = vv₄
  325. copy_3_slots_unmasked          $78..80 = z₁
  326. cmpne_3_floats                 $75..77 = notEqual($75..77, $78..80)
  327. bitwise_or_int                 $76 |= $77
  328. bitwise_or_int                 $75 |= $76
  329. merge_condition_mask           CondMask = $74 & $75
  330. zero_slot_unmasked             $76 = 0
  331. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($76)
  332. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  333. load_condition_mask            CondMask = $74
  334. copy_3_slots_unmasked          $35..37 = i₁
  335. copy_4_constants               $38..41 = testMatrix3x3(0..3)
  336. copy_4_constants               $42..45 = testMatrix3x3(4..7)
  337. copy_constant                  $46 = testMatrix3x3(8)
  338. copy_4_slots_unmasked          $74..77 = $35..38
  339. copy_2_slots_unmasked          $78..79 = $39..40
  340. dot_3_floats                   $74 = dot($74..76, $77..79)
  341. copy_3_slots_unmasked          $75..77 = $35..37
  342. copy_3_slots_unmasked          $78..80 = $41..43
  343. dot_3_floats                   $75 = dot($75..77, $78..80)
  344. copy_3_slots_unmasked          $76..78 = $35..37
  345. copy_3_slots_unmasked          $79..81 = $44..46
  346. dot_3_floats                   $76 = dot($76..78, $79..81)
  347. copy_3_slots_masked            v₄ = Mask($74..76)
  348. store_condition_mask           $74 = CondMask
  349. copy_3_slots_unmasked          $75..77 = v₄
  350. copy_constant                  $78 = 0x40C00000 (6.0)
  351. copy_constant                  $79 = 0x41700000 (15.0)
  352. copy_constant                  $80 = 0x41C00000 (24.0)
  353. cmpne_3_floats                 $75..77 = notEqual($75..77, $78..80)
  354. bitwise_or_int                 $76 |= $77
  355. bitwise_or_int                 $75 |= $76
  356. merge_condition_mask           CondMask = $74 & $75
  357. zero_slot_unmasked             $76 = 0
  358. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($76)
  359. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  360. load_condition_mask            CondMask = $74
  361. copy_4_constants               $35..38 = testMatrix3x3(0..3)
  362. copy_4_constants               $39..42 = testMatrix3x3(4..7)
  363. copy_constant                  $43 = testMatrix3x3(8)
  364. shuffle                        $36..43 = ($36..43)[2 5 0 3 6 1 4 7]
  365. copy_3_slots_unmasked          $44..46 = i₁
  366. copy_3_slots_unmasked          $74..76 = $35..37
  367. copy_3_slots_unmasked          $77..79 = $44..46
  368. dot_3_floats                   $74 = dot($74..76, $77..79)
  369. copy_3_slots_unmasked          $75..77 = $38..40
  370. copy_3_slots_unmasked          $78..80 = $44..46
  371. dot_3_floats                   $75 = dot($75..77, $78..80)
  372. copy_4_slots_unmasked          $76..79 = $41..44
  373. copy_2_slots_unmasked          $80..81 = $45..46
  374. dot_3_floats                   $76 = dot($76..78, $79..81)
  375. copy_3_slots_masked            v₄ = Mask($74..76)
  376. store_condition_mask           $74 = CondMask
  377. copy_3_slots_unmasked          $75..77 = v₄
  378. copy_constant                  $78 = 0x41400000 (12.0)
  379. copy_constant                  $79 = 0x41700000 (15.0)
  380. copy_constant                  $80 = 0x41900000 (18.0)
  381. cmpne_3_floats                 $75..77 = notEqual($75..77, $78..80)
  382. bitwise_or_int                 $76 |= $77
  383. bitwise_or_int                 $75 |= $76
  384. merge_condition_mask           CondMask = $74 & $75
  385. zero_slot_unmasked             $76 = 0
  386. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($76)
  387. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  388. load_condition_mask            CondMask = $74
  389. copy_3_slots_unmasked          $35..37 = n₁
  390. copy_4_constants               $38..41 = testMatrix3x3(0..3)
  391. copy_4_constants               $42..45 = testMatrix3x3(4..7)
  392. copy_constant                  $46 = testMatrix3x3(8)
  393. copy_4_slots_unmasked          $74..77 = $35..38
  394. copy_2_slots_unmasked          $78..79 = $39..40
  395. dot_3_floats                   $74 = dot($74..76, $77..79)
  396. copy_3_slots_unmasked          $75..77 = $35..37
  397. copy_3_slots_unmasked          $78..80 = $41..43
  398. dot_3_floats                   $75 = dot($75..77, $78..80)
  399. copy_3_slots_unmasked          $76..78 = $35..37
  400. copy_3_slots_unmasked          $79..81 = $44..46
  401. dot_3_floats                   $76 = dot($76..78, $79..81)
  402. copy_3_slots_masked            v₄ = Mask($74..76)
  403. store_condition_mask           $74 = CondMask
  404. copy_3_slots_unmasked          $75..77 = v₄
  405. copy_constant                  $78 = 0xC0C00000 (-6.0)
  406. copy_constant                  $79 = 0xC1700000 (-15.0)
  407. copy_constant                  $80 = 0xC1C00000 (-24.0)
  408. cmpne_3_floats                 $75..77 = notEqual($75..77, $78..80)
  409. bitwise_or_int                 $76 |= $77
  410. bitwise_or_int                 $75 |= $76
  411. merge_condition_mask           CondMask = $74 & $75
  412. zero_slot_unmasked             $76 = 0
  413. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($76)
  414. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  415. load_condition_mask            CondMask = $74
  416. copy_4_constants               $35..38 = testMatrix3x3(0..3)
  417. copy_4_constants               $39..42 = testMatrix3x3(4..7)
  418. copy_constant                  $43 = testMatrix3x3(8)
  419. shuffle                        $36..43 = ($36..43)[2 5 0 3 6 1 4 7]
  420. copy_3_slots_unmasked          $44..46 = n₁
  421. copy_3_slots_unmasked          $74..76 = $35..37
  422. copy_3_slots_unmasked          $77..79 = $44..46
  423. dot_3_floats                   $74 = dot($74..76, $77..79)
  424. copy_3_slots_unmasked          $75..77 = $38..40
  425. copy_3_slots_unmasked          $78..80 = $44..46
  426. dot_3_floats                   $75 = dot($75..77, $78..80)
  427. copy_4_slots_unmasked          $76..79 = $41..44
  428. copy_2_slots_unmasked          $80..81 = $45..46
  429. dot_3_floats                   $76 = dot($76..78, $79..81)
  430. copy_3_slots_masked            v₄ = Mask($74..76)
  431. copy_constant                  $77 = 0xC1400000 (-12.0)
  432. copy_constant                  $78 = 0xC1700000 (-15.0)
  433. copy_constant                  $79 = 0xC1900000 (-18.0)
  434. cmpeq_3_floats                 $74..76 = equal($74..76, $77..79)
  435. bitwise_and_int                $75 &= $76
  436. bitwise_and_int                $74 &= $75
  437. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($74)
  438. load_return_mask               RetMask = $73
  439. copy_slot_unmasked             $73 = [test_no_op_vec3_X_mat3].result
  440. label                          label 0x0000000A
  441. copy_slot_masked               $72 = Mask($73)
  442. label                          label 0x00000002
  443. load_condition_mask            CondMask = $51
  444. zero_slot_unmasked             $0 = 0
  445. merge_condition_mask           CondMask = $71 & $72
  446. branch_if_no_lanes_active      branch_if_no_lanes_active +155 (label 1 at #601)
  447. store_return_mask              $1 = RetMask
  448. copy_constant                  $2 = 0xBF800000 (-1.0)
  449. swizzle_4                      $2..5 = ($2..5).xxxx
  450. copy_4_slots_unmasked          n₂ = $2..5
  451. copy_constant                  $2 = 0x3F800000 (1.0)
  452. swizzle_4                      $2..5 = ($2..5).xxxx
  453. copy_4_slots_unmasked          i₂ = $2..5
  454. zero_4_slots_unmasked          z₂ = 0
  455. copy_4_constants               testMatrix4x4(0..3) = testMatrix2x2
  456. copy_4_constants               testMatrix4x4(4..7) = testMatrix2x2
  457. copy_4_constants               testMatrix4x4(8..11) = testMatrix2x2
  458. copy_4_constants               testMatrix4x4(12..15) = testMatrix2x2
  459. zero_4_slots_unmasked          v₅ = 0
  460. zero_4_slots_unmasked          vv₅ = 0
  461. zero_4_slots_unmasked          $2..5 = 0
  462. copy_4_slots_masked            vv₅ = Mask($2..5)
  463. zero_4_slots_unmasked          $2..5 = 0
  464. copy_4_slots_masked            vv₅ = Mask($2..5)
  465. store_condition_mask           $2 = CondMask
  466. copy_4_slots_unmasked          $3..6 = vv₅
  467. copy_4_slots_unmasked          $7..10 = z₂
  468. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  469. bitwise_or_2_ints              $3..4 |= $5..6
  470. bitwise_or_int                 $3 |= $4
  471. merge_condition_mask           CondMask = $2 & $3
  472. zero_slot_unmasked             $4 = 0
  473. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  474. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  475. load_condition_mask            CondMask = $2
  476. copy_4_slots_unmasked          $51..54 = i₂
  477. copy_4_slots_unmasked          $55..58 = testMatrix4x4(0..3)
  478. copy_4_slots_unmasked          $59..62 = testMatrix4x4(4..7)
  479. copy_4_slots_unmasked          $63..66 = testMatrix4x4(8..11)
  480. copy_4_slots_unmasked          $67..70 = testMatrix4x4(12..15)
  481. copy_4_slots_unmasked          $2..5 = $51..54
  482. copy_4_slots_unmasked          $6..9 = $55..58
  483. dot_4_floats                   $2 = dot($2..5, $6..9)
  484. copy_4_slots_unmasked          $3..6 = $51..54
  485. copy_4_slots_unmasked          $7..10 = $59..62
  486. dot_4_floats                   $3 = dot($3..6, $7..10)
  487. copy_4_slots_unmasked          $4..7 = $51..54
  488. copy_4_slots_unmasked          $8..11 = $63..66
  489. dot_4_floats                   $4 = dot($4..7, $8..11)
  490. copy_4_slots_unmasked          $5..8 = $51..54
  491. copy_4_slots_unmasked          $9..12 = $67..70
  492. dot_4_floats                   $5 = dot($5..8, $9..12)
  493. copy_4_slots_masked            v₅ = Mask($2..5)
  494. store_condition_mask           $2 = CondMask
  495. copy_4_slots_unmasked          $3..6 = v₅
  496. copy_constant                  $7 = 0x41200000 (10.0)
  497. swizzle_4                      $7..10 = ($7..10).xxxx
  498. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  499. bitwise_or_2_ints              $3..4 |= $5..6
  500. bitwise_or_int                 $3 |= $4
  501. merge_condition_mask           CondMask = $2 & $3
  502. stack_rewind
  503. zero_slot_unmasked             $4 = 0
  504. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  505. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  506. load_condition_mask            CondMask = $2
  507. copy_4_slots_unmasked          $51..54 = testMatrix4x4(0..3)
  508. copy_4_slots_unmasked          $55..58 = testMatrix4x4(4..7)
  509. copy_4_slots_unmasked          $59..62 = testMatrix4x4(8..11)
  510. copy_4_slots_unmasked          $63..66 = testMatrix4x4(12..15)
  511. shuffle                        $52..66 = ($52..66)[3 7 11 0 4 8 12 1 5 9 13 2 6 10 14]
  512. copy_4_slots_unmasked          $67..70 = i₂
  513. copy_4_slots_unmasked          $2..5 = $51..54
  514. copy_4_slots_unmasked          $6..9 = $67..70
  515. dot_4_floats                   $2 = dot($2..5, $6..9)
  516. copy_4_slots_unmasked          $3..6 = $55..58
  517. copy_4_slots_unmasked          $7..10 = $67..70
  518. dot_4_floats                   $3 = dot($3..6, $7..10)
  519. copy_4_slots_unmasked          $4..7 = $59..62
  520. copy_4_slots_unmasked          $8..11 = $67..70
  521. dot_4_floats                   $4 = dot($4..7, $8..11)
  522. copy_4_slots_unmasked          $5..8 = $63..66
  523. copy_4_slots_unmasked          $9..12 = $67..70
  524. dot_4_floats                   $5 = dot($5..8, $9..12)
  525. copy_4_slots_masked            v₅ = Mask($2..5)
  526. store_condition_mask           $2 = CondMask
  527. copy_4_slots_unmasked          $3..6 = v₅
  528. copy_constant                  $7 = 0x40800000 (4.0)
  529. copy_constant                  $8 = 0x41000000 (8.0)
  530. copy_constant                  $9 = 0x41400000 (12.0)
  531. copy_constant                  $10 = 0x41800000 (16.0)
  532. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  533. bitwise_or_2_ints              $3..4 |= $5..6
  534. bitwise_or_int                 $3 |= $4
  535. merge_condition_mask           CondMask = $2 & $3
  536. zero_slot_unmasked             $4 = 0
  537. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  538. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  539. load_condition_mask            CondMask = $2
  540. copy_4_slots_unmasked          $51..54 = n₂
  541. copy_4_slots_unmasked          $55..58 = testMatrix4x4(0..3)
  542. copy_4_slots_unmasked          $59..62 = testMatrix4x4(4..7)
  543. copy_4_slots_unmasked          $63..66 = testMatrix4x4(8..11)
  544. copy_4_slots_unmasked          $67..70 = testMatrix4x4(12..15)
  545. copy_4_slots_unmasked          $2..5 = $51..54
  546. copy_4_slots_unmasked          $6..9 = $55..58
  547. dot_4_floats                   $2 = dot($2..5, $6..9)
  548. copy_4_slots_unmasked          $3..6 = $51..54
  549. copy_4_slots_unmasked          $7..10 = $59..62
  550. dot_4_floats                   $3 = dot($3..6, $7..10)
  551. copy_4_slots_unmasked          $4..7 = $51..54
  552. copy_4_slots_unmasked          $8..11 = $63..66
  553. dot_4_floats                   $4 = dot($4..7, $8..11)
  554. copy_4_slots_unmasked          $5..8 = $51..54
  555. copy_4_slots_unmasked          $9..12 = $67..70
  556. dot_4_floats                   $5 = dot($5..8, $9..12)
  557. copy_4_slots_masked            v₅ = Mask($2..5)
  558. store_condition_mask           $2 = CondMask
  559. copy_4_slots_unmasked          $3..6 = v₅
  560. copy_constant                  $7 = 0xC1200000 (-10.0)
  561. swizzle_4                      $7..10 = ($7..10).xxxx
  562. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  563. bitwise_or_2_ints              $3..4 |= $5..6
  564. bitwise_or_int                 $3 |= $4
  565. merge_condition_mask           CondMask = $2 & $3
  566. zero_slot_unmasked             $4 = 0
  567. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  568. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  569. load_condition_mask            CondMask = $2
  570. copy_4_slots_unmasked          $51..54 = testMatrix4x4(0..3)
  571. copy_4_slots_unmasked          $55..58 = testMatrix4x4(4..7)
  572. copy_4_slots_unmasked          $59..62 = testMatrix4x4(8..11)
  573. copy_4_slots_unmasked          $63..66 = testMatrix4x4(12..15)
  574. shuffle                        $52..66 = ($52..66)[3 7 11 0 4 8 12 1 5 9 13 2 6 10 14]
  575. copy_4_slots_unmasked          $67..70 = n₂
  576. copy_4_slots_unmasked          $2..5 = $51..54
  577. copy_4_slots_unmasked          $6..9 = $67..70
  578. dot_4_floats                   $2 = dot($2..5, $6..9)
  579. copy_4_slots_unmasked          $3..6 = $55..58
  580. copy_4_slots_unmasked          $7..10 = $67..70
  581. dot_4_floats                   $3 = dot($3..6, $7..10)
  582. copy_4_slots_unmasked          $4..7 = $59..62
  583. copy_4_slots_unmasked          $8..11 = $67..70
  584. dot_4_floats                   $4 = dot($4..7, $8..11)
  585. copy_4_slots_unmasked          $5..8 = $63..66
  586. copy_4_slots_unmasked          $9..12 = $67..70
  587. dot_4_floats                   $5 = dot($5..8, $9..12)
  588. copy_4_slots_masked            v₅ = Mask($2..5)
  589. copy_constant                  $6 = 0xC0800000 (-4.0)
  590. copy_constant                  $7 = 0xC1000000 (-8.0)
  591. copy_constant                  $8 = 0xC1400000 (-12.0)
  592. copy_constant                  $9 = 0xC1800000 (-16.0)
  593. cmpeq_4_floats                 $2..5 = equal($2..5, $6..9)
  594. bitwise_and_2_ints             $2..3 &= $4..5
  595. bitwise_and_int                $2 &= $3
  596. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($2)
  597. load_return_mask               RetMask = $1
  598. copy_slot_unmasked             $1 = [test_no_op_vec4_X_mat4].result
  599. label                          label 0x0000000B
  600. copy_slot_masked               $0 = Mask($1)
  601. label                          label 0x00000001
  602. load_condition_mask            CondMask = $71
  603. swizzle_4                      $0..3 = ($0..3).xxxx
  604. copy_4_constants               $4..7 = colorRed
  605. copy_4_constants               $8..11 = colorGreen
  606. mix_4_ints                     $0..3 = mix($4..7, $8..11, $0..3)
  607. load_src                       src.rgba = $0..3
