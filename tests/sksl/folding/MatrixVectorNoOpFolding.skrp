    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. store_condition_mask           $13 = CondMask
    4. store_condition_mask           $24 = CondMask
    5. store_condition_mask           $44 = CondMask
    6. store_condition_mask           $60 = CondMask
    7. store_condition_mask           $73 = CondMask
    8. branch_if_no_lanes_active      branch_if_no_lanes_active +57 (label 6 at #65)
    9. store_return_mask              $74 = RetMask
   10. zero_4_slots_unmasked          v, vv = 0
   11. copy_2_constants               $75..76 = testInputs(0..1)
   12. copy_2_slots_masked            v = Mask($75..76)
   13. copy_2_constants               $75..76 = testInputs(0..1)
   14. copy_2_slots_masked            v = Mask($75..76)
   15. store_condition_mask           $75 = CondMask
   16. copy_2_slots_unmasked          $76..77 = v
   17. copy_2_constants               $78..79 = testInputs(0..1)
   18. cmpne_2_floats                 $76..77 = notEqual($76..77, $78..79)
   19. bitwise_or_int                 $76 |= $77
   20. merge_condition_mask           CondMask = $75 & $76
   21. zero_slot_unmasked             $77 = 0
   22. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($77)
   23. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   24. load_condition_mask            CondMask = $75
   25. store_condition_mask           $75 = CondMask
   26. copy_2_slots_unmasked          $76..77 = v
   27. copy_2_constants               $78..79 = testInputs(0..1)
   28. cmpne_2_floats                 $76..77 = notEqual($76..77, $78..79)
   29. bitwise_or_int                 $76 |= $77
   30. merge_condition_mask           CondMask = $75 & $76
   31. zero_slot_unmasked             $77 = 0
   32. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($77)
   33. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   34. load_condition_mask            CondMask = $75
   35. zero_2_slots_unmasked          $75..76 = 0
   36. copy_2_constants               $77..78 = testInputs(0..1)
   37. sub_2_floats                   $75..76 -= $77..78
   38. copy_2_slots_masked            v = Mask($75..76)
   39. zero_2_slots_unmasked          $75..76 = 0
   40. copy_2_constants               $77..78 = testInputs(0..1)
   41. sub_2_floats                   $75..76 -= $77..78
   42. copy_2_slots_masked            v = Mask($75..76)
   43. store_condition_mask           $75 = CondMask
   44. copy_2_slots_unmasked          $76..77 = v
   45. zero_2_slots_unmasked          $78..79 = 0
   46. copy_2_constants               $80..81 = testInputs(0..1)
   47. sub_2_floats                   $78..79 -= $80..81
   48. cmpne_2_floats                 $76..77 = notEqual($76..77, $78..79)
   49. bitwise_or_int                 $76 |= $77
   50. merge_condition_mask           CondMask = $75 & $76
   51. zero_slot_unmasked             $77 = 0
   52. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($77)
   53. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   54. load_condition_mask            CondMask = $75
   55. zero_2_slots_unmasked          $75..76 = 0
   56. copy_2_slots_masked            vv = Mask($75..76)
   57. zero_2_slots_unmasked          $75..76 = 0
   58. copy_2_slots_masked            vv = Mask($75..76)
   59. zero_2_slots_unmasked          $77..78 = 0
   60. cmpeq_2_floats                 $75..76 = equal($75..76, $77..78)
   61. bitwise_and_int                $75 &= $76
   62. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($75)
   63. load_return_mask               RetMask = $74
   64. copy_slot_unmasked             $74 = [test_no_op_mat2_X_vec2].result
   65. label                          label 0x00000006
   66. zero_slot_unmasked             $61 = 0
   67. merge_condition_mask           CondMask = $73 & $74
   68. branch_if_no_lanes_active      branch_if_no_lanes_active +64 (label 5 at #132)
   69. store_return_mask              $62 = RetMask
   70. zero_4_slots_unmasked          v₁, vv₁(0) = 0
   71. zero_2_slots_unmasked          vv₁(1..2) = 0
   72. copy_3_constants               $63..65 = testInputs(0..2)
   73. copy_3_slots_masked            v₁ = Mask($63..65)
   74. copy_3_constants               $63..65 = testInputs(0..2)
   75. copy_3_slots_masked            v₁ = Mask($63..65)
   76. store_condition_mask           $63 = CondMask
   77. copy_3_slots_unmasked          $64..66 = v₁
   78. copy_3_constants               $67..69 = testInputs(0..2)
   79. cmpne_3_floats                 $64..66 = notEqual($64..66, $67..69)
   80. bitwise_or_int                 $65 |= $66
   81. bitwise_or_int                 $64 |= $65
   82. merge_condition_mask           CondMask = $63 & $64
   83. zero_slot_unmasked             $65 = 0
   84. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($65)
   85. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   86. load_condition_mask            CondMask = $63
   87. store_condition_mask           $63 = CondMask
   88. copy_3_slots_unmasked          $64..66 = v₁
   89. copy_3_constants               $67..69 = testInputs(0..2)
   90. cmpne_3_floats                 $64..66 = notEqual($64..66, $67..69)
   91. bitwise_or_int                 $65 |= $66
   92. bitwise_or_int                 $64 |= $65
   93. merge_condition_mask           CondMask = $63 & $64
   94. zero_slot_unmasked             $65 = 0
   95. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($65)
   96. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   97. load_condition_mask            CondMask = $63
   98. zero_3_slots_unmasked          $63..65 = 0
   99. copy_3_constants               $66..68 = testInputs(0..2)
  100. sub_3_floats                   $63..65 -= $66..68
  101. copy_3_slots_masked            v₁ = Mask($63..65)
  102. zero_3_slots_unmasked          $63..65 = 0
  103. copy_3_constants               $66..68 = testInputs(0..2)
  104. sub_3_floats                   $63..65 -= $66..68
  105. copy_3_slots_masked            v₁ = Mask($63..65)
  106. store_condition_mask           $63 = CondMask
  107. copy_3_slots_unmasked          $64..66 = v₁
  108. zero_3_slots_unmasked          $67..69 = 0
  109. copy_3_constants               $70..72 = testInputs(0..2)
  110. sub_3_floats                   $67..69 -= $70..72
  111. cmpne_3_floats                 $64..66 = notEqual($64..66, $67..69)
  112. bitwise_or_int                 $65 |= $66
  113. bitwise_or_int                 $64 |= $65
  114. merge_condition_mask           CondMask = $63 & $64
  115. zero_slot_unmasked             $65 = 0
  116. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($65)
  117. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  118. load_condition_mask            CondMask = $63
  119. zero_3_slots_unmasked          $63..65 = 0
  120. copy_3_slots_masked            vv₁ = Mask($63..65)
  121. zero_3_slots_unmasked          $63..65 = 0
  122. copy_3_slots_masked            vv₁ = Mask($63..65)
  123. zero_3_slots_unmasked          $66..68 = 0
  124. cmpeq_3_floats                 $63..65 = equal($63..65, $66..68)
  125. bitwise_and_int                $64 &= $65
  126. bitwise_and_int                $63 &= $64
  127. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($63)
  128. load_return_mask               RetMask = $62
  129. copy_slot_unmasked             $62 = [test_no_op_mat3_X_vec3].result
  130. label                          label 0x00000007
  131. copy_slot_masked               $61 = Mask($62)
  132. label                          label 0x00000005
  133. load_condition_mask            CondMask = $73
  134. zero_slot_unmasked             $45 = 0
  135. merge_condition_mask           CondMask = $60 & $61
  136. branch_if_no_lanes_active      branch_if_no_lanes_active +64 (label 4 at #200)
  137. store_return_mask              $46 = RetMask
  138. zero_4_slots_unmasked          v₂ = 0
  139. zero_4_slots_unmasked          vv₂ = 0
  140. copy_4_constants               $47..50 = testInputs
  141. copy_4_slots_masked            v₂ = Mask($47..50)
  142. copy_4_constants               $47..50 = testInputs
  143. copy_4_slots_masked            v₂ = Mask($47..50)
  144. store_condition_mask           $47 = CondMask
  145. copy_4_slots_unmasked          $48..51 = v₂
  146. copy_4_constants               $52..55 = testInputs
  147. cmpne_4_floats                 $48..51 = notEqual($48..51, $52..55)
  148. bitwise_or_2_ints              $48..49 |= $50..51
  149. bitwise_or_int                 $48 |= $49
  150. merge_condition_mask           CondMask = $47 & $48
  151. zero_slot_unmasked             $49 = 0
  152. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($49)
  153. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  154. load_condition_mask            CondMask = $47
  155. store_condition_mask           $47 = CondMask
  156. copy_4_slots_unmasked          $48..51 = v₂
  157. copy_4_constants               $52..55 = testInputs
  158. cmpne_4_floats                 $48..51 = notEqual($48..51, $52..55)
  159. bitwise_or_2_ints              $48..49 |= $50..51
  160. bitwise_or_int                 $48 |= $49
  161. merge_condition_mask           CondMask = $47 & $48
  162. zero_slot_unmasked             $49 = 0
  163. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($49)
  164. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  165. load_condition_mask            CondMask = $47
  166. zero_4_slots_unmasked          $47..50 = 0
  167. copy_4_constants               $51..54 = testInputs
  168. sub_4_floats                   $47..50 -= $51..54
  169. copy_4_slots_masked            v₂ = Mask($47..50)
  170. zero_4_slots_unmasked          $47..50 = 0
  171. copy_4_constants               $51..54 = testInputs
  172. sub_4_floats                   $47..50 -= $51..54
  173. copy_4_slots_masked            v₂ = Mask($47..50)
  174. store_condition_mask           $47 = CondMask
  175. copy_4_slots_unmasked          $48..51 = v₂
  176. zero_4_slots_unmasked          $52..55 = 0
  177. copy_4_constants               $56..59 = testInputs
  178. sub_4_floats                   $52..55 -= $56..59
  179. cmpne_4_floats                 $48..51 = notEqual($48..51, $52..55)
  180. bitwise_or_2_ints              $48..49 |= $50..51
  181. bitwise_or_int                 $48 |= $49
  182. merge_condition_mask           CondMask = $47 & $48
  183. zero_slot_unmasked             $49 = 0
  184. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($49)
  185. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  186. load_condition_mask            CondMask = $47
  187. zero_4_slots_unmasked          $47..50 = 0
  188. copy_4_slots_masked            vv₂ = Mask($47..50)
  189. zero_4_slots_unmasked          $47..50 = 0
  190. copy_4_slots_masked            vv₂ = Mask($47..50)
  191. zero_4_slots_unmasked          $51..54 = 0
  192. cmpeq_4_floats                 $47..50 = equal($47..50, $51..54)
  193. bitwise_and_2_ints             $47..48 &= $49..50
  194. bitwise_and_int                $47 &= $48
  195. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($47)
  196. load_return_mask               RetMask = $46
  197. copy_slot_unmasked             $46 = [test_no_op_mat4_X_vec4].result
  198. label                          label 0x00000008
  199. copy_slot_masked               $45 = Mask($46)
  200. label                          label 0x00000004
  201. load_condition_mask            CondMask = $60
  202. zero_slot_unmasked             $25 = 0
  203. merge_condition_mask           CondMask = $44 & $45
  204. branch_if_no_lanes_active      branch_if_no_lanes_active +100 (label 3 at #304)
  205. store_return_mask              $26 = RetMask
  206. copy_constant                  $27 = 0xBF800000 (-1.0)
  207. copy_slot_unmasked             $28 = $27
  208. copy_2_slots_unmasked          n = $27..28
  209. copy_constant                  $27 = 0x3F800000 (1.0)
  210. copy_slot_unmasked             $28 = $27
  211. copy_2_slots_unmasked          i = $27..28
  212. zero_4_slots_unmasked          z, v₃ = 0
  213. zero_2_slots_unmasked          vv₃ = 0
  214. zero_2_slots_unmasked          $27..28 = 0
  215. copy_2_slots_masked            vv₃ = Mask($27..28)
  216. zero_2_slots_unmasked          $27..28 = 0
  217. copy_2_slots_masked            vv₃ = Mask($27..28)
  218. store_condition_mask           $27 = CondMask
  219. copy_2_slots_unmasked          $28..29 = vv₃
  220. copy_2_slots_unmasked          $30..31 = z
  221. cmpne_2_floats                 $28..29 = notEqual($28..29, $30..31)
  222. bitwise_or_int                 $28 |= $29
  223. merge_condition_mask           CondMask = $27 & $28
  224. zero_slot_unmasked             $29 = 0
  225. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($29)
  226. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  227. load_condition_mask            CondMask = $27
  228. copy_2_slots_unmasked          $60..61 = i
  229. copy_4_constants               $62..65 = testMatrix2x2
  230. copy_4_slots_unmasked          $27..30 = $60..63
  231. dot_2_floats                   $27 = dot($27..28, $29..30)
  232. copy_2_slots_unmasked          $28..29 = $60..61
  233. copy_2_slots_unmasked          $30..31 = $64..65
  234. dot_2_floats                   $28 = dot($28..29, $30..31)
  235. copy_2_slots_masked            v₃ = Mask($27..28)
  236. store_condition_mask           $27 = CondMask
  237. copy_2_slots_unmasked          $28..29 = v₃
  238. copy_constant                  $30 = 0x40400000 (3.0)
  239. copy_constant                  $31 = 0x40E00000 (7.0)
  240. cmpne_2_floats                 $28..29 = notEqual($28..29, $30..31)
  241. bitwise_or_int                 $28 |= $29
  242. merge_condition_mask           CondMask = $27 & $28
  243. zero_slot_unmasked             $29 = 0
  244. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($29)
  245. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  246. load_condition_mask            CondMask = $27
  247. copy_4_constants               $60..63 = testMatrix2x2
  248. swizzle_3                      $61..63 = ($61..63).yxz
  249. copy_2_slots_unmasked          $64..65 = i
  250. copy_2_slots_unmasked          $27..28 = $60..61
  251. copy_2_slots_unmasked          $29..30 = $64..65
  252. dot_2_floats                   $27 = dot($27..28, $29..30)
  253. copy_4_slots_unmasked          $28..31 = $62..65
  254. dot_2_floats                   $28 = dot($28..29, $30..31)
  255. copy_2_slots_masked            v₃ = Mask($27..28)
  256. store_condition_mask           $27 = CondMask
  257. copy_2_slots_unmasked          $28..29 = v₃
  258. copy_constant                  $30 = 0x40800000 (4.0)
  259. copy_constant                  $31 = 0x40C00000 (6.0)
  260. cmpne_2_floats                 $28..29 = notEqual($28..29, $30..31)
  261. bitwise_or_int                 $28 |= $29
  262. merge_condition_mask           CondMask = $27 & $28
  263. zero_slot_unmasked             $29 = 0
  264. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($29)
  265. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  266. load_condition_mask            CondMask = $27
  267. copy_2_slots_unmasked          $60..61 = n
  268. copy_4_constants               $62..65 = testMatrix2x2
  269. copy_4_slots_unmasked          $27..30 = $60..63
  270. dot_2_floats                   $27 = dot($27..28, $29..30)
  271. copy_2_slots_unmasked          $28..29 = $60..61
  272. copy_2_slots_unmasked          $30..31 = $64..65
  273. dot_2_floats                   $28 = dot($28..29, $30..31)
  274. copy_2_slots_masked            v₃ = Mask($27..28)
  275. store_condition_mask           $27 = CondMask
  276. copy_2_slots_unmasked          $28..29 = v₃
  277. copy_constant                  $30 = 0xC0400000 (-3.0)
  278. copy_constant                  $31 = 0xC0E00000 (-7.0)
  279. cmpne_2_floats                 $28..29 = notEqual($28..29, $30..31)
  280. bitwise_or_int                 $28 |= $29
  281. merge_condition_mask           CondMask = $27 & $28
  282. zero_slot_unmasked             $29 = 0
  283. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($29)
  284. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  285. load_condition_mask            CondMask = $27
  286. copy_4_constants               $60..63 = testMatrix2x2
  287. swizzle_3                      $61..63 = ($61..63).yxz
  288. copy_2_slots_unmasked          $64..65 = n
  289. copy_2_slots_unmasked          $27..28 = $60..61
  290. copy_2_slots_unmasked          $29..30 = $64..65
  291. dot_2_floats                   $27 = dot($27..28, $29..30)
  292. copy_4_slots_unmasked          $28..31 = $62..65
  293. dot_2_floats                   $28 = dot($28..29, $30..31)
  294. copy_2_slots_masked            v₃ = Mask($27..28)
  295. copy_constant                  $29 = 0xC0800000 (-4.0)
  296. copy_constant                  $30 = 0xC0C00000 (-6.0)
  297. cmpeq_2_floats                 $27..28 = equal($27..28, $29..30)
  298. bitwise_and_int                $27 &= $28
  299. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($27)
  300. load_return_mask               RetMask = $26
  301. copy_slot_unmasked             $26 = [test_no_op_vec2_X_mat2].result
  302. label                          label 0x00000009
  303. copy_slot_masked               $25 = Mask($26)
  304. label                          label 0x00000003
  305. load_condition_mask            CondMask = $44
  306. zero_slot_unmasked             $14 = 0
  307. merge_condition_mask           CondMask = $24 & $25
  308. branch_if_no_lanes_active      branch_if_no_lanes_active +134 (label 2 at #442)
  309. store_return_mask              $15 = RetMask
  310. copy_constant                  $16 = 0xBF800000 (-1.0)
  311. swizzle_3                      $16..18 = ($16..18).xxx
  312. copy_3_slots_unmasked          n₁ = $16..18
  313. copy_constant                  $16 = 0x3F800000 (1.0)
  314. swizzle_3                      $16..18 = ($16..18).xxx
  315. copy_3_slots_unmasked          i₁ = $16..18
  316. zero_4_slots_unmasked          z₁, v₄(0) = 0
  317. zero_4_slots_unmasked          v₄(1..2), vv₄(0..1) = 0
  318. zero_slot_unmasked             vv₄(2) = 0
  319. zero_3_slots_unmasked          $16..18 = 0
  320. copy_3_slots_masked            vv₄ = Mask($16..18)
  321. zero_3_slots_unmasked          $16..18 = 0
  322. copy_3_slots_masked            vv₄ = Mask($16..18)
  323. store_condition_mask           $16 = CondMask
  324. copy_3_slots_unmasked          $17..19 = vv₄
  325. copy_3_slots_unmasked          $20..22 = z₁
  326. cmpne_3_floats                 $17..19 = notEqual($17..19, $20..22)
  327. bitwise_or_int                 $18 |= $19
  328. bitwise_or_int                 $17 |= $18
  329. merge_condition_mask           CondMask = $16 & $17
  330. zero_slot_unmasked             $18 = 0
  331. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($18)
  332. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  333. load_condition_mask            CondMask = $16
  334. copy_3_slots_unmasked          $44..46 = i₁
  335. copy_4_constants               $47..50 = testMatrix3x3(0..3)
  336. copy_4_constants               $51..54 = testMatrix3x3(4..7)
  337. copy_constant                  $55 = testMatrix3x3(8)
  338. copy_4_slots_unmasked          $16..19 = $44..47
  339. copy_2_slots_unmasked          $20..21 = $48..49
  340. dot_3_floats                   $16 = dot($16..18, $19..21)
  341. copy_3_slots_unmasked          $17..19 = $44..46
  342. copy_3_slots_unmasked          $20..22 = $50..52
  343. dot_3_floats                   $17 = dot($17..19, $20..22)
  344. copy_3_slots_unmasked          $18..20 = $44..46
  345. copy_3_slots_unmasked          $21..23 = $53..55
  346. dot_3_floats                   $18 = dot($18..20, $21..23)
  347. copy_3_slots_masked            v₄ = Mask($16..18)
  348. store_condition_mask           $16 = CondMask
  349. copy_3_slots_unmasked          $17..19 = v₄
  350. copy_constant                  $20 = 0x40C00000 (6.0)
  351. copy_constant                  $21 = 0x41700000 (15.0)
  352. copy_constant                  $22 = 0x41C00000 (24.0)
  353. cmpne_3_floats                 $17..19 = notEqual($17..19, $20..22)
  354. bitwise_or_int                 $18 |= $19
  355. bitwise_or_int                 $17 |= $18
  356. merge_condition_mask           CondMask = $16 & $17
  357. zero_slot_unmasked             $18 = 0
  358. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($18)
  359. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  360. load_condition_mask            CondMask = $16
  361. copy_4_constants               $44..47 = testMatrix3x3(0..3)
  362. copy_4_constants               $48..51 = testMatrix3x3(4..7)
  363. copy_constant                  $52 = testMatrix3x3(8)
  364. shuffle                        $45..52 = ($45..52)[2 5 0 3 6 1 4 7]
  365. copy_3_slots_unmasked          $53..55 = i₁
  366. copy_3_slots_unmasked          $16..18 = $44..46
  367. copy_3_slots_unmasked          $19..21 = $53..55
  368. dot_3_floats                   $16 = dot($16..18, $19..21)
  369. copy_3_slots_unmasked          $17..19 = $47..49
  370. copy_3_slots_unmasked          $20..22 = $53..55
  371. dot_3_floats                   $17 = dot($17..19, $20..22)
  372. copy_4_slots_unmasked          $18..21 = $50..53
  373. copy_2_slots_unmasked          $22..23 = $54..55
  374. dot_3_floats                   $18 = dot($18..20, $21..23)
  375. copy_3_slots_masked            v₄ = Mask($16..18)
  376. store_condition_mask           $16 = CondMask
  377. copy_3_slots_unmasked          $17..19 = v₄
  378. copy_constant                  $20 = 0x41400000 (12.0)
  379. copy_constant                  $21 = 0x41700000 (15.0)
  380. copy_constant                  $22 = 0x41900000 (18.0)
  381. cmpne_3_floats                 $17..19 = notEqual($17..19, $20..22)
  382. bitwise_or_int                 $18 |= $19
  383. bitwise_or_int                 $17 |= $18
  384. merge_condition_mask           CondMask = $16 & $17
  385. zero_slot_unmasked             $18 = 0
  386. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($18)
  387. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  388. load_condition_mask            CondMask = $16
  389. copy_3_slots_unmasked          $44..46 = n₁
  390. copy_4_constants               $47..50 = testMatrix3x3(0..3)
  391. copy_4_constants               $51..54 = testMatrix3x3(4..7)
  392. copy_constant                  $55 = testMatrix3x3(8)
  393. copy_4_slots_unmasked          $16..19 = $44..47
  394. copy_2_slots_unmasked          $20..21 = $48..49
  395. dot_3_floats                   $16 = dot($16..18, $19..21)
  396. copy_3_slots_unmasked          $17..19 = $44..46
  397. copy_3_slots_unmasked          $20..22 = $50..52
  398. dot_3_floats                   $17 = dot($17..19, $20..22)
  399. copy_3_slots_unmasked          $18..20 = $44..46
  400. copy_3_slots_unmasked          $21..23 = $53..55
  401. dot_3_floats                   $18 = dot($18..20, $21..23)
  402. copy_3_slots_masked            v₄ = Mask($16..18)
  403. store_condition_mask           $16 = CondMask
  404. copy_3_slots_unmasked          $17..19 = v₄
  405. copy_constant                  $20 = 0xC0C00000 (-6.0)
  406. copy_constant                  $21 = 0xC1700000 (-15.0)
  407. copy_constant                  $22 = 0xC1C00000 (-24.0)
  408. cmpne_3_floats                 $17..19 = notEqual($17..19, $20..22)
  409. bitwise_or_int                 $18 |= $19
  410. bitwise_or_int                 $17 |= $18
  411. merge_condition_mask           CondMask = $16 & $17
  412. zero_slot_unmasked             $18 = 0
  413. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($18)
  414. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  415. load_condition_mask            CondMask = $16
  416. copy_4_constants               $44..47 = testMatrix3x3(0..3)
  417. copy_4_constants               $48..51 = testMatrix3x3(4..7)
  418. copy_constant                  $52 = testMatrix3x3(8)
  419. shuffle                        $45..52 = ($45..52)[2 5 0 3 6 1 4 7]
  420. copy_3_slots_unmasked          $53..55 = n₁
  421. copy_3_slots_unmasked          $16..18 = $44..46
  422. copy_3_slots_unmasked          $19..21 = $53..55
  423. dot_3_floats                   $16 = dot($16..18, $19..21)
  424. copy_3_slots_unmasked          $17..19 = $47..49
  425. copy_3_slots_unmasked          $20..22 = $53..55
  426. dot_3_floats                   $17 = dot($17..19, $20..22)
  427. copy_4_slots_unmasked          $18..21 = $50..53
  428. copy_2_slots_unmasked          $22..23 = $54..55
  429. dot_3_floats                   $18 = dot($18..20, $21..23)
  430. copy_3_slots_masked            v₄ = Mask($16..18)
  431. copy_constant                  $19 = 0xC1400000 (-12.0)
  432. copy_constant                  $20 = 0xC1700000 (-15.0)
  433. copy_constant                  $21 = 0xC1900000 (-18.0)
  434. cmpeq_3_floats                 $16..18 = equal($16..18, $19..21)
  435. bitwise_and_int                $17 &= $18
  436. bitwise_and_int                $16 &= $17
  437. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($16)
  438. load_return_mask               RetMask = $15
  439. copy_slot_unmasked             $15 = [test_no_op_vec3_X_mat3].result
  440. label                          label 0x0000000A
  441. copy_slot_masked               $14 = Mask($15)
  442. label                          label 0x00000002
  443. load_condition_mask            CondMask = $24
  444. zero_slot_unmasked             $0 = 0
  445. merge_condition_mask           CondMask = $13 & $14
  446. branch_if_no_lanes_active      branch_if_no_lanes_active +155 (label 1 at #601)
  447. store_return_mask              $1 = RetMask
  448. copy_constant                  $2 = 0xBF800000 (-1.0)
  449. swizzle_4                      $2..5 = ($2..5).xxxx
  450. copy_4_slots_unmasked          n₂ = $2..5
  451. copy_constant                  $2 = 0x3F800000 (1.0)
  452. swizzle_4                      $2..5 = ($2..5).xxxx
  453. copy_4_slots_unmasked          i₂ = $2..5
  454. zero_4_slots_unmasked          z₂ = 0
  455. copy_4_constants               testMatrix4x4(0..3) = testMatrix2x2
  456. copy_4_constants               testMatrix4x4(4..7) = testMatrix2x2
  457. copy_4_constants               testMatrix4x4(8..11) = testMatrix2x2
  458. copy_4_constants               testMatrix4x4(12..15) = testMatrix2x2
  459. zero_4_slots_unmasked          v₅ = 0
  460. zero_4_slots_unmasked          vv₅ = 0
  461. zero_4_slots_unmasked          $2..5 = 0
  462. copy_4_slots_masked            vv₅ = Mask($2..5)
  463. zero_4_slots_unmasked          $2..5 = 0
  464. copy_4_slots_masked            vv₅ = Mask($2..5)
  465. store_condition_mask           $2 = CondMask
  466. copy_4_slots_unmasked          $3..6 = vv₅
  467. copy_4_slots_unmasked          $7..10 = z₂
  468. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  469. bitwise_or_2_ints              $3..4 |= $5..6
  470. bitwise_or_int                 $3 |= $4
  471. merge_condition_mask           CondMask = $2 & $3
  472. zero_slot_unmasked             $4 = 0
  473. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  474. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  475. load_condition_mask            CondMask = $2
  476. copy_4_slots_unmasked          $24..27 = i₂
  477. copy_4_slots_unmasked          $28..31 = testMatrix4x4(0..3)
  478. copy_4_slots_unmasked          $32..35 = testMatrix4x4(4..7)
  479. copy_4_slots_unmasked          $36..39 = testMatrix4x4(8..11)
  480. copy_4_slots_unmasked          $40..43 = testMatrix4x4(12..15)
  481. copy_4_slots_unmasked          $2..5 = $24..27
  482. copy_4_slots_unmasked          $6..9 = $28..31
  483. dot_4_floats                   $2 = dot($2..5, $6..9)
  484. copy_4_slots_unmasked          $3..6 = $24..27
  485. copy_4_slots_unmasked          $7..10 = $32..35
  486. dot_4_floats                   $3 = dot($3..6, $7..10)
  487. copy_4_slots_unmasked          $4..7 = $24..27
  488. copy_4_slots_unmasked          $8..11 = $36..39
  489. dot_4_floats                   $4 = dot($4..7, $8..11)
  490. copy_4_slots_unmasked          $5..8 = $24..27
  491. copy_4_slots_unmasked          $9..12 = $40..43
  492. dot_4_floats                   $5 = dot($5..8, $9..12)
  493. copy_4_slots_masked            v₅ = Mask($2..5)
  494. store_condition_mask           $2 = CondMask
  495. copy_4_slots_unmasked          $3..6 = v₅
  496. copy_constant                  $7 = 0x41200000 (10.0)
  497. swizzle_4                      $7..10 = ($7..10).xxxx
  498. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  499. bitwise_or_2_ints              $3..4 |= $5..6
  500. bitwise_or_int                 $3 |= $4
  501. merge_condition_mask           CondMask = $2 & $3
  502. stack_rewind
  503. zero_slot_unmasked             $4 = 0
  504. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  505. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  506. load_condition_mask            CondMask = $2
  507. copy_4_slots_unmasked          $24..27 = testMatrix4x4(0..3)
  508. copy_4_slots_unmasked          $28..31 = testMatrix4x4(4..7)
  509. copy_4_slots_unmasked          $32..35 = testMatrix4x4(8..11)
  510. copy_4_slots_unmasked          $36..39 = testMatrix4x4(12..15)
  511. shuffle                        $25..39 = ($25..39)[3 7 11 0 4 8 12 1 5 9 13 2 6 10 14]
  512. copy_4_slots_unmasked          $40..43 = i₂
  513. copy_4_slots_unmasked          $2..5 = $24..27
  514. copy_4_slots_unmasked          $6..9 = $40..43
  515. dot_4_floats                   $2 = dot($2..5, $6..9)
  516. copy_4_slots_unmasked          $3..6 = $28..31
  517. copy_4_slots_unmasked          $7..10 = $40..43
  518. dot_4_floats                   $3 = dot($3..6, $7..10)
  519. copy_4_slots_unmasked          $4..7 = $32..35
  520. copy_4_slots_unmasked          $8..11 = $40..43
  521. dot_4_floats                   $4 = dot($4..7, $8..11)
  522. copy_4_slots_unmasked          $5..8 = $36..39
  523. copy_4_slots_unmasked          $9..12 = $40..43
  524. dot_4_floats                   $5 = dot($5..8, $9..12)
  525. copy_4_slots_masked            v₅ = Mask($2..5)
  526. store_condition_mask           $2 = CondMask
  527. copy_4_slots_unmasked          $3..6 = v₅
  528. copy_constant                  $7 = 0x40800000 (4.0)
  529. copy_constant                  $8 = 0x41000000 (8.0)
  530. copy_constant                  $9 = 0x41400000 (12.0)
  531. copy_constant                  $10 = 0x41800000 (16.0)
  532. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  533. bitwise_or_2_ints              $3..4 |= $5..6
  534. bitwise_or_int                 $3 |= $4
  535. merge_condition_mask           CondMask = $2 & $3
  536. zero_slot_unmasked             $4 = 0
  537. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  538. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  539. load_condition_mask            CondMask = $2
  540. copy_4_slots_unmasked          $24..27 = n₂
  541. copy_4_slots_unmasked          $28..31 = testMatrix4x4(0..3)
  542. copy_4_slots_unmasked          $32..35 = testMatrix4x4(4..7)
  543. copy_4_slots_unmasked          $36..39 = testMatrix4x4(8..11)
  544. copy_4_slots_unmasked          $40..43 = testMatrix4x4(12..15)
  545. copy_4_slots_unmasked          $2..5 = $24..27
  546. copy_4_slots_unmasked          $6..9 = $28..31
  547. dot_4_floats                   $2 = dot($2..5, $6..9)
  548. copy_4_slots_unmasked          $3..6 = $24..27
  549. copy_4_slots_unmasked          $7..10 = $32..35
  550. dot_4_floats                   $3 = dot($3..6, $7..10)
  551. copy_4_slots_unmasked          $4..7 = $24..27
  552. copy_4_slots_unmasked          $8..11 = $36..39
  553. dot_4_floats                   $4 = dot($4..7, $8..11)
  554. copy_4_slots_unmasked          $5..8 = $24..27
  555. copy_4_slots_unmasked          $9..12 = $40..43
  556. dot_4_floats                   $5 = dot($5..8, $9..12)
  557. copy_4_slots_masked            v₅ = Mask($2..5)
  558. store_condition_mask           $2 = CondMask
  559. copy_4_slots_unmasked          $3..6 = v₅
  560. copy_constant                  $7 = 0xC1200000 (-10.0)
  561. swizzle_4                      $7..10 = ($7..10).xxxx
  562. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  563. bitwise_or_2_ints              $3..4 |= $5..6
  564. bitwise_or_int                 $3 |= $4
  565. merge_condition_mask           CondMask = $2 & $3
  566. zero_slot_unmasked             $4 = 0
  567. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  568. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  569. load_condition_mask            CondMask = $2
  570. copy_4_slots_unmasked          $24..27 = testMatrix4x4(0..3)
  571. copy_4_slots_unmasked          $28..31 = testMatrix4x4(4..7)
  572. copy_4_slots_unmasked          $32..35 = testMatrix4x4(8..11)
  573. copy_4_slots_unmasked          $36..39 = testMatrix4x4(12..15)
  574. shuffle                        $25..39 = ($25..39)[3 7 11 0 4 8 12 1 5 9 13 2 6 10 14]
  575. copy_4_slots_unmasked          $40..43 = n₂
  576. copy_4_slots_unmasked          $2..5 = $24..27
  577. copy_4_slots_unmasked          $6..9 = $40..43
  578. dot_4_floats                   $2 = dot($2..5, $6..9)
  579. copy_4_slots_unmasked          $3..6 = $28..31
  580. copy_4_slots_unmasked          $7..10 = $40..43
  581. dot_4_floats                   $3 = dot($3..6, $7..10)
  582. copy_4_slots_unmasked          $4..7 = $32..35
  583. copy_4_slots_unmasked          $8..11 = $40..43
  584. dot_4_floats                   $4 = dot($4..7, $8..11)
  585. copy_4_slots_unmasked          $5..8 = $36..39
  586. copy_4_slots_unmasked          $9..12 = $40..43
  587. dot_4_floats                   $5 = dot($5..8, $9..12)
  588. copy_4_slots_masked            v₅ = Mask($2..5)
  589. copy_constant                  $6 = 0xC0800000 (-4.0)
  590. copy_constant                  $7 = 0xC1000000 (-8.0)
  591. copy_constant                  $8 = 0xC1400000 (-12.0)
  592. copy_constant                  $9 = 0xC1800000 (-16.0)
  593. cmpeq_4_floats                 $2..5 = equal($2..5, $6..9)
  594. bitwise_and_2_ints             $2..3 &= $4..5
  595. bitwise_and_int                $2 &= $3
  596. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($2)
  597. load_return_mask               RetMask = $1
  598. copy_slot_unmasked             $1 = [test_no_op_vec4_X_mat4].result
  599. label                          label 0x0000000B
  600. copy_slot_masked               $0 = Mask($1)
  601. label                          label 0x00000001
  602. load_condition_mask            CondMask = $13
  603. swizzle_4                      $0..3 = ($0..3).xxxx
  604. copy_4_constants               $4..7 = colorRed
  605. copy_4_constants               $8..11 = colorGreen
  606. mix_4_ints                     $0..3 = mix($4..7, $8..11, $0..3)
  607. load_src                       src.rgba = $0..3
