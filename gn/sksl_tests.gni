# Copyright 2020 Google LLC
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Things are easiest for everyone if these source paths are absolute.
_tests = get_path_info("../tests", "abspath")

sksl_fp_tests_sources = [
  "$_tests/sksl/errors/GrBothExplicitReturnAndSkOutColor.fp",
  "$_tests/sksl/fp/GrHelloWorld.fp",
]

sksl_glsl_tests_sources = [
  "$_tests/sksl/errors/OpenArray.sksl",
  "$_tests/sksl/errors/UndefinedSymbol.sksl",
  "$_tests/sksl/glsl/ArrayConstructors.sksl",
  "$_tests/sksl/glsl/ArrayIndexTypes.sksl",
  "$_tests/sksl/glsl/ArrayTypes.sksl",
  "$_tests/sksl/glsl/BoolFolding.sksl",
  "$_tests/sksl/glsl/Caps.sksl",
  "$_tests/sksl/glsl/CastsRoundTowardZero.sksl",
  "$_tests/sksl/glsl/ClipDistanceFragment.sksl",
  "$_tests/sksl/glsl/ClipDistanceVertex.vert",
  "$_tests/sksl/glsl/Clockwise.sksl",
  "$_tests/sksl/glsl/ComplexDelete.sksl",
  "$_tests/sksl/glsl/ConstArray.sksl",
  "$_tests/sksl/glsl/ConstantIf.sksl",
  "$_tests/sksl/glsl/Control.sksl",
  "$_tests/sksl/glsl/DeadLoopVariable.sksl",
  "$_tests/sksl/glsl/DependentInitializers.sksl",
  "$_tests/sksl/glsl/Discard.sksl",
  "$_tests/sksl/glsl/FloatFolding.sksl",
  "$_tests/sksl/glsl/FrExp.sksl",
  "$_tests/sksl/glsl/Functions.sksl",
  "$_tests/sksl/glsl/Height.sksl",
  "$_tests/sksl/glsl/HelloWorld.sksl",
  "$_tests/sksl/glsl/Hex.sksl",
  "$_tests/sksl/glsl/InstanceID.vert",
  "$_tests/sksl/glsl/IntFolding.sksl",
  "$_tests/sksl/glsl/InterfaceBlockAnonymous.sksl",
  "$_tests/sksl/glsl/InterfaceBlockArray.sksl",
  "$_tests/sksl/glsl/InterfaceBlockNamed.sksl",
  "$_tests/sksl/glsl/Matrices.sksl",
  "$_tests/sksl/glsl/MatrixFolding.sksl",
  "$_tests/sksl/glsl/ModifiersDeclaration.sksl",
  "$_tests/sksl/glsl/MultipleAssignments.sksl",
  "$_tests/sksl/glsl/NegatedVectorLiteral.sksl",
  "$_tests/sksl/glsl/NumberConversions.sksl",
  "$_tests/sksl/glsl/Offset.sksl",
  "$_tests/sksl/glsl/Operators.sksl",
  "$_tests/sksl/glsl/RectangleTexture.sksl",
  "$_tests/sksl/glsl/SampleMask.sksl",
  "$_tests/sksl/glsl/ShortCircuitBoolFolding.sksl",
  "$_tests/sksl/glsl/StackingVectorCasts.sksl",
  "$_tests/sksl/glsl/StaticSwitchWithBreak.sksl",
  "$_tests/sksl/glsl/StaticSwitchWithBreakInsideBlock.sksl",
  "$_tests/sksl/glsl/StaticSwitchWithConditionalBreak.sksl",
  "$_tests/sksl/glsl/StaticSwitchWithConditionalBreakInsideBlock.sksl",
  "$_tests/sksl/glsl/StaticSwitchWithFallthroughA.sksl",
  "$_tests/sksl/glsl/StaticSwitchWithFallthroughB.sksl",
  "$_tests/sksl/glsl/StaticSwitchWithStaticConditionalBreak.sksl",
  "$_tests/sksl/glsl/StaticSwitchWithStaticConditionalBreakInsideBlock.sksl",
  "$_tests/sksl/glsl/Structs.sksl",
  "$_tests/sksl/glsl/Switch.sksl",
  "$_tests/sksl/glsl/SwitchContainingDeadCode.sksl",
  "$_tests/sksl/glsl/SwitchWithFallthrough.sksl",
  "$_tests/sksl/glsl/SwizzleConstants.sksl",
  "$_tests/sksl/glsl/SwizzleLTRB.sksl",
  "$_tests/sksl/glsl/SwizzleOpt.sksl",
  "$_tests/sksl/glsl/SwizzleScalar.sksl",
  "$_tests/sksl/glsl/TernaryAsLValueEntirelyFoldable.sksl",
  "$_tests/sksl/glsl/TernaryAsLValueFoldableTest.sksl",
  "$_tests/sksl/glsl/TernaryAsLValueUnfoldable.sksl",
  "$_tests/sksl/glsl/UnusedVariables.sksl",
  "$_tests/sksl/glsl/VectorConstructors.sksl",
  "$_tests/sksl/glsl/VectorFolding.sksl",
  "$_tests/sksl/glsl/VertexID.vert",
  "$_tests/sksl/glsl/Width.sksl",
  "$_tests/sksl/inliner/DoWhileBodyMustBeInlinedIntoAScope.sksl",
  "$_tests/sksl/inliner/DoWhileTestCannotBeInlined.sksl",
  "$_tests/sksl/inliner/ForBodyMustBeInlinedIntoAScope.sksl",
  "$_tests/sksl/inliner/ForInitializerExpressionsCanBeInlined.sksl",
  "$_tests/sksl/inliner/ForWithReturnInsideCannotBeInlined.sksl",
  "$_tests/sksl/inliner/ForWithoutReturnInsideCanBeInlined.sksl",
  "$_tests/sksl/inliner/IfBodyMustBeInlinedIntoAScope.sksl",
  "$_tests/sksl/inliner/IfElseBodyMustBeInlinedIntoAScope.sksl",
  "$_tests/sksl/inliner/IfElseChainWithReturnsCanBeInlined.sksl",
  "$_tests/sksl/inliner/IfTestCanBeInlined.sksl",
  "$_tests/sksl/inliner/IfWithReturnsCanBeInlined.sksl",
  "$_tests/sksl/inliner/InlineKeywordOverridesThreshold.sksl",
  "$_tests/sksl/inliner/InlineThreshold.sksl",
  "$_tests/sksl/inliner/InlineWithInoutArgument.sksl",
  "$_tests/sksl/inliner/InlineWithModifiedArgument.sksl",
  "$_tests/sksl/inliner/InlineWithNestedBigCalls.sksl",
  "$_tests/sksl/inliner/InlineWithNestedCalls.sksl",
  "$_tests/sksl/inliner/InlineWithUnmodifiedArgument.sksl",
  "$_tests/sksl/inliner/InlineWithUnnecessaryBlocks.sksl",
  "$_tests/sksl/inliner/InlinerAvoidsVariableNameOverlap.sksl",
  "$_tests/sksl/inliner/InlinerManglesNames.sksl",
  "$_tests/sksl/inliner/InlinerWrapsEarlyReturnsWithDoWhileBlock.sksl",
  "$_tests/sksl/inliner/ShortCircuitEvaluationsCannotInlineRightHandSide.sksl",
  "$_tests/sksl/inliner/SwitchWithCastCanBeInlined.sksl",
  "$_tests/sksl/inliner/SwitchWithReturnInsideCannotBeInlined.sksl",
  "$_tests/sksl/inliner/SwitchWithoutReturnInsideCanBeInlined.sksl",
  "$_tests/sksl/inliner/TernaryResultsCannotBeInlined.sksl",
  "$_tests/sksl/inliner/TernaryTestCanBeInlined.sksl",
  "$_tests/sksl/inliner/WhileBodyMustBeInlinedIntoAScope.sksl",
  "$_tests/sksl/inliner/WhileTestCannotBeInlined.sksl",
]
